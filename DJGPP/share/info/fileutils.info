This is fileutils.info, produced by makeinfo version 4.13 from fileutils.texi.

START-INFO-DIR-ENTRY
* File utilities: (fileutils).  GNU file utilities.
* chgrp: (fileutils)chgrp invocation.           Change file groups.
* chown: (fileutils)chown invocation.           Change file owners/groups.
* chmod: (fileutils)chmod invocation.           Change file permissions.
* cp: (fileutils)cp invocation.                 Copy files.
* dd: (fileutils)dd invocation.                 Copy and convert a file.
* df: (fileutils)df invocation.                 Report filesystem disk usage.
* dir: (fileutils)dir invocation.               List directories briefly.
* dircolors: (fileutils)dircolors invocation.   Color setup for ls.
* du: (fileutils)du invocation.                 Report on disk usage.
* install: (fileutils)install invocation.       Copy and change attributes.
* ln: (fileutils)ln invocation.                 Make links between files.
* ls: (fileutils)ls invocation.                 List directory contents.
* mkdir: (fileutils)mkdir invocation.           Create directories.
* mkfifo: (fileutils)mkfifo invocation.         Create FIFOs (named pipes).
* mknod: (fileutils)mknod invocation.           Create special files.
* mv: (fileutils)mv invocation.                 Rename files.
* rm: (fileutils)rm invocation.                 Remove files.
* rmdir: (fileutils)rmdir invocation.           Remove empty directories.
* shred: (fileutils)shred invocation.           Remove files more securely.
* sync: (fileutils)sync invocation.             Synchronize memory and disk.
* touch: (fileutils)touch invocation.           Change file timestamps.
* vdir: (fileutils)vdir invocation.             List directories verbosely.
END-INFO-DIR-ENTRY

   This file documents the GNU set of file utilities.

   Copyright 1994, 95, 96, 1999, 2001 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".


File: fileutils.info,  Node: Top,  Next: Introduction,  Up: (dir)

GNU file utilities
******************

This manual documents version 4.1 of the GNU file utilities.

* Menu:

* Introduction::                Caveats, overview, and authors.
* Common options::              Common options.
* File permissions::            Access modes.
* Date input formats::          Specifying date strings.
* Directory listing::           ls dir vdir d v dircolors
* Basic operations::            cp dd install mv rm shred
* Special file types::          ln mkdir rmdir mkfifo mknod
* Changing file attributes::    chgrp chmod chown touch
* Disk usage::                  df du sync
* Index::                       General index.


File: fileutils.info,  Node: Introduction,  Next: Common options,  Prev: Top,  Up: Top

1 Introduction
**************

This manual is incomplete: No attempt is made to explain basic file
concepts in a way suitable for novices.  Thus, if you are interested,
please get involved in improving this manual.  The entire GNU community
will benefit.

   The GNU file utilities are mostly compatible with the POSIX.2
standard.

   Please report bugs to <bug-fileutils@gnu.org>.  Remember to include
the version number, machine architecture, input files, and any other
information needed to reproduce the bug: your input, what you expected,
what you got, and why it is wrong.  Diffs are welcome, but please
include a description of the problem as well, since this is sometimes
difficult to infer. *Note Bugs: (gcc)Bugs.

   This manual was originally derived from the Unix man pages in the
distribution, which were written by David MacKenzie and updated by Jim
Meyering.  What you are reading now is the authoritative documentation
for these utilities;  the man pages are no longer being maintained.
Franc,ois Pinard did the initial conversion to Texinfo format.  Karl
Berry did the indexing, some reorganization, and editing of the results.
Richard Stallman contributed his usual invaluable insights to the
overall process.


File: fileutils.info,  Node: Common options,  Next: File permissions,  Prev: Introduction,  Up: Top

2 Common options
****************

Certain options are available in all of these programs (in fact, every
GNU program should accept them).  Rather than writing identical
descriptions for each of the programs, they are described here.

`--help'
     Print a usage message listing all available options, then exit
     successfully.

`--version'
     Print the version number, then exit successfully.

* Menu:

* Backup options::              -b -S -V, in some programs.
* Block size::                  BLOCK_SIZE and --block-size, in some programs.
* Target directory::            --target-directory, in some programs.
* Trailing slashes::            --strip-trailing-slashes, in some programs.


File: fileutils.info,  Node: Backup options,  Next: Block size,  Up: Common options

2.1 Backup options
==================

Some GNU programs (at least `cp', `install', `ln', and `mv') optionally
make backups of files before writing new versions.  These options
control the details of these backups.  The options are also briefly
mentioned in the descriptions of the particular programs.

`-b'
`--backup[=METHOD]'
     Make a backup of each file that would otherwise be overwritten or
     removed.  Without this option, the original versions are destroyed.
     Use METHOD to determine the type of backups to make.  When this
     option is used but METHOD is not specified, then the value of the
     `VERSION_CONTROL' environment variable is used.  And if
     `VERSION_CONTROL' is not set, the default backup type is
     `existing'.

     Note that the short form of this option, `-b' does not accept any
     argument.  Using `-b' is equivalent to using `--backup=existing'.

     This option corresponds to the Emacs variable `version-control';
     the values for METHOD are the same as those used in Emacs.  This
     option also accepts more descriptive names.  The valid METHODs are
     (unique abbreviations are accepted):

    `none'
    `off'
          Never make backups.

    `numbered'
    `t'
          Always make numbered backups.

    `existing'
    `nil'
          Make numbered backups of files that already have them, simple
          backups of the others.

    `simple'
    `never'
          Always make simple backups.  Please note `never' is not to be
          confused with `none'.


`-S SUFFIX'
`--suffix=SUFFIX'
     Append SUFFIX to each backup file made with `-b'.  If this option
     is not specified, the value of the `SIMPLE_BACKUP_SUFFIX'
     environment variable is used.  And if `SIMPLE_BACKUP_SUFFIX' is not
     set, the default is `~', just as in Emacs.

`--version-control=METHOD'
     This option is obsolete and will be removed in a future release.
     It has been replaced with `--backup'.



File: fileutils.info,  Node: Block size,  Next: Target directory,  Prev: Backup options,  Up: Common options

2.2 Block size
==============

Some GNU programs (at least `df', `du', and `ls') display file sizes in
"blocks".  You can adjust the block size to make file sizes easier to
read.  The block size used for display is independent of any filesystem
block size.

   Normally, disk usage sizes are rounded up, disk free space sizes are
rounded down, and other sizes are rounded to the nearest value with ties
rounding to an even value.

   The default block size is chosen by examining the following
environment variables in turn; the first one that is set determines the
block size.

`DF_BLOCK_SIZE'
     This specifies the default block size for the `df' command.
     Similarly, `DU_BLOCK_SIZE' specifies the default for `du' and
     `LS_BLOCK_SIZE' for `ls'.

`BLOCK_SIZE'
     This specifies the default block size for all three commands, if
     the above command-specific environment variables are not set.

`POSIXLY_CORRECT'
     If neither the `COMMAND_BLOCK_SIZE' nor the `BLOCK_SIZE' variables
     are set, but this variable is set, the block size defaults to 512.


   If none of the above environment variables are set, the block size
currently defaults to 1024 bytes, but this number may change in the
future.

   A block size specification can be a positive integer specifying the
number of bytes per block, or it can be `human-readable' or `si' to
select a human-readable format.

   With human-readable formats, output sizes are followed by a size
letter such as `M' for megabytes.  `BLOCK_SIZE=human-readable' uses
powers of 1024; `M' stands for 1,048,576 bytes.  `BLOCK_SIZE=si' is
similar, but uses powers of 1000; `M' stands for 1,000,000 bytes.  (SI,
the International System of Units, defines these power-of-1000
prefixes.)

   An integer block size can be followed by a size letter to specify a
multiple of that size.  When this notation is used, the size letters
normally stand for powers of 1024, and can be followed by an optional
`B' for "byte"; but if followed by `D' (for "decimal byte"), they stand
for powers of 1000.  For example, `BLOCK_SIZE=4MB' is equivalent to
`BLOCK_SIZE=4194304', and `BLOCK_SIZE=4MD' is equivalent to
`BLOCK_SIZE=4000000'.

   The following size letters are defined.  Large sizes like `1Y' may
be rejected by your computer due to limitations of its arithmetic.

`k'
     kilo: 2^10 = 1024 for `human-readable', or 10^3 = 1000 for `si'.

`M'
     Mega: 2^20 = 1,048,576 or 10^6 = 1,000,000.

`G'
     Giga: 2^30 = 1,073,741,824 or 10^9 = 1,000,000,000.

`T'
     Tera: 2^40 = 1,099,511,627,776 or 10^12 = 1,000,000,000,000.

`P'
     Peta: 2^50 = 1,125,899,906,842,624 or 10^15 =
     1,000,000,000,000,000.

`E'
     Exa: 2^60 = 1,152,921,504,606,846,976 or 10^18 =
     1,000,000,000,000,000,000.

`Z'
     Zetta: 2^70 = 1,180,591,620,717,411,303,424 or 10^21 =
     1,000,000,000,000,000,000,000.

`Y'
     Yotta: 2^80 = 1,208,925,819,614,629,174,706,176 or 10^24 =
     1,000,000,000,000,000,000,000,000.

   Block size defaults can be overridden by an explicit
`--block-size=SIZE' option.  The `-k' or `--kilobytes' option is
equivalent to `--block-size=1k', which is the default unless the
`POSIXLY_CORRECT' environment variable is set.  The `-h' or
`--human-readable' option is equivalent to
`--block-size=human-readable'.  The `--si' option is equivalent to
`--block-size=si'.


File: fileutils.info,  Node: Target directory,  Next: Trailing slashes,  Prev: Block size,  Up: Common options

2.3 Target directory
====================

Some GNU programs (at least `cp', `install', `ln', and `mv') allow you
to specify the target directory via this option:

`--target-directory=DIRECTORY'
     Specify the destination DIRECTORY.

     The interface for most programs is that after processing options
     and a finite (possibly zero) number of fixed-position arguments,
     the remaining argument list is either expected to be empty, or is
     a list of items (usually files) that will all be handled
     identically.  The `xargs' program is designed to work well with
     this convention.

     The commands in the `mv'-family are unusual in that they take a
     variable number of arguments with a special case at the _end_
     (namely, the target directory).  This makes it nontrivial to
     perform some operations, e.g., "move all files from here to
     ../d/", because `mv * ../d/' might exhaust the argument space, and
     `ls | xargs ...' doesn't have a clean way to specify an extra
     final argument for each invocation of the subject command.  (It
     can be done by going through a shell command, but that requires
     more human labor and brain power than it should.)

     The `--target-directory' option allows the `cp', `install', `ln',
     and `mv' programs to be used conveniently with `xargs'.  For
     example, you can move the files from the current directory to a
     sibling directory, `d' like this: (However, this doesn't move
     files whose names begin with `.'.)

          ls |xargs mv --target-directory=../d

     If you use the GNU `find' program, you can move _all_ files with
     this command:
          find . -mindepth 1 -maxdepth 1 \
            | xargs mv --target-directory=../d

     But that will fail if there are no files in the current directory
     or if any file has a name containing a newline character.  The
     following example removes those limitations and requires both GNU
     `find' and GNU `xargs':
          find . -mindepth 1 -maxdepth 1 -print0 \
            | xargs --null --no-run-if-empty \
                mv --target-directory=../d



File: fileutils.info,  Node: Trailing slashes,  Prev: Target directory,  Up: Common options

2.4 Trailing slashes
====================

Some GNU programs (at least `cp' and `mv') allow you to remove any
trailing slashes from each SOURCE argument before operating on it.  The
`--strip-trailing-slashes' option enables this behavior.

   This is useful when a SOURCE argument may have a trailing slash and
specify a symbolic link to a directory.  This scenario is in fact rather
common because some shells can automatically append a trailing slash
when performing file name completion on such symbolic links.  Without
this option, `mv', for example, (via the system's rename function) must
interpret a trailing slash as a request to dereference the symbolic link
and so must rename the indirectly referenced _directory_ and not the
symbolic link.  Although it may seem surprising that such behavior be
the default, it is required by POSIX.2 and is consistent with other
parts of that standard.


File: fileutils.info,  Node: File permissions,  Next: Date input formats,  Prev: Common options,  Up: Top

3 File permissions
******************

Each file has a set of "permissions" that control the kinds of access
that users have to that file.  The permissions for a file are also
called its "access mode".  They can be represented either in symbolic
form or as an octal number.

* Menu:

* Mode Structure::              Structure of file permissions.
* Symbolic Modes::              Mnemonic permissions representation.
* Numeric Modes::               Permissions as octal numbers.


File: fileutils.info,  Node: Mode Structure,  Next: Symbolic Modes,  Up: File permissions

3.1 Structure of File Permissions
=================================

There are three kinds of permissions that a user can have for a file:

  1. permission to read the file.  For directories, this means
     permission to list the contents of the directory.

  2. permission to write to (change) the file.  For directories, this
     means permission to create and remove files in the directory.

  3. permission to execute the file (run it as a program).  For
     directories, this means permission to access files in the
     directory.

   There are three categories of users who may have different
permissions to perform any of the above operations on a file:

  1. the file's owner;

  2. other users who are in the file's group;

  3. everyone else.

   Files are given an owner and group when they are created.  Usually
the owner is the current user and the group is the group of the
directory the file is in, but this varies with the operating system, the
filesystem the file is created on, and the way the file is created.  You
can change the owner and group of a file by using the `chown' and
`chgrp' commands.

   In addition to the three sets of three permissions listed above, a
file's permissions have three special components, which affect only
executable files (programs) and, on some systems, directories:

  1. set the process's effective user ID to that of the file upon
     execution (called the "setuid bit").  No effect on directories.

  2. set the process's effective group ID to that of the file upon
     execution (called the "setgid bit").  For directories on some
     systems, put files created in the directory into the same group as
     the directory, no matter what group the user who creates them is
     in.

  3. save the program's text image on the swap device so it will load
     more quickly when run (called the "sticky bit").  For directories
     on some systems, prevent users from removing or renaming a file in
     a directory unless they own the file or the directory; this is
     called the "restriction deletion flag" for the directory.


File: fileutils.info,  Node: Symbolic Modes,  Next: Numeric Modes,  Prev: Mode Structure,  Up: File permissions

3.2 Symbolic Modes
==================

"Symbolic modes" represent changes to files' permissions as operations
on single-character symbols.  They allow you to modify either all or
selected parts of files' permissions, optionally based on their
previous values, and perhaps on the current `umask' as well (*note
Umask and Protection::).

   The format of symbolic modes is:

     [ugoa...][[+-=][rwxXstugo...]...][,...]

   The following sections describe the operators and other details of
symbolic modes.

* Menu:

* Setting Permissions::          Basic operations on permissions.
* Copying Permissions::          Copying existing permissions.
* Changing Special Permissions:: Special permissions.
* Conditional Executability::    Conditionally affecting executability.
* Multiple Changes::             Making multiple changes.
* Umask and Protection::              The effect of the umask.


File: fileutils.info,  Node: Setting Permissions,  Next: Copying Permissions,  Up: Symbolic Modes

3.2.1 Setting Permissions
-------------------------

The basic symbolic operations on a file's permissions are adding,
removing, and setting the permission that certain users have to read,
write, and execute the file.  These operations have the following
format:

     USERS OPERATION PERMISSIONS

The spaces between the three parts above are shown for readability only;
symbolic modes cannot contain spaces.

   The USERS part tells which users' access to the file is changed.  It
consists of one or more of the following letters (or it can be empty;
*note Umask and Protection::, for a description of what happens then).
When more than one of these letters is given, the order that they are
in does not matter.

`u'
     the user who owns the file;

`g'
     other users who are in the file's group;

`o'
     all other users;

`a'
     all users; the same as `ugo'.

   The OPERATION part tells how to change the affected users' access to
the file, and is one of the following symbols:

`+'
     to add the PERMISSIONS to whatever permissions the USERS already
     have for the file;

`-'
     to remove the PERMISSIONS from whatever permissions the USERS
     already have for the file;

`='
     to make the PERMISSIONS the only permissions that the USERS have
     for the file.

   The PERMISSIONS part tells what kind of access to the file should be
changed; it is zero or more of the following letters.  As with the
USERS part, the order does not matter when more than one letter is
given.  Omitting the PERMISSIONS part is useful only with the `='
operation, where it gives the specified USERS no access at all to the
file.

`r'
     the permission the USERS have to read the file;

`w'
     the permission the USERS have to write to the file;

`x'
     the permission the USERS have to execute the file.

   For example, to give everyone permission to read and write a file,
but not to execute it, use:

     a=rw

   To remove write permission for from all users other than the file's
owner, use:

     go-w

The above command does not affect the access that the owner of the file
has to it, nor does it affect whether other users can read or execute
the file.

   To give everyone except a file's owner no permission to do anything
with that file, use the mode below.  Other users could still remove the
file, if they have write permission on the directory it is in.

     go=

Another way to specify the same thing is:

     og-rxw


File: fileutils.info,  Node: Copying Permissions,  Next: Changing Special Permissions,  Prev: Setting Permissions,  Up: Symbolic Modes

3.2.2 Copying Existing Permissions
----------------------------------

You can base a file's permissions on its existing permissions.  To do
this, instead of using `r', `w', or `x' after the operator, you use the
letter `u', `g', or `o'.  For example, the mode
     o+g
   adds the permissions for users who are in a file's group to the
permissions that other users have for the file.  Thus, if the file
started out as mode 664 (`rw-rw-r--'), the above mode would change it
to mode 666 (`rw-rw-rw-').  If the file had started out as mode 741
(`rwxr----x'), the above mode would change it to mode 745
(`rwxr--r-x').  The `-' and `=' operations work analogously.


File: fileutils.info,  Node: Changing Special Permissions,  Next: Conditional Executability,  Prev: Copying Permissions,  Up: Symbolic Modes

3.2.3 Changing Special Permissions
----------------------------------

In addition to changing a file's read, write, and execute permissions,
you can change its special permissions.  *Note Mode Structure::, for a
summary of these permissions.

   To change a file's permission to set the user ID on execution, use
`u' in the USERS part of the symbolic mode and `s' in the PERMISSIONS
part.

   To change a file's permission to set the group ID on execution, use
`g' in the USERS part of the symbolic mode and `s' in the PERMISSIONS
part.

   To change a file's permission to stay permanently on the swap device,
use `o' in the USERS part of the symbolic mode and `t' in the
PERMISSIONS part.

   For example, to add set user ID permission to a program, you can use
the mode:

     u+s

   To remove both set user ID and set group ID permission from it, you
can use the mode:

     ug-s

   To cause a program to be saved on the swap device, you can use the
mode:

     o+t

   Remember that the special permissions only affect files that are
executable, plus, on some systems, directories (on which they have
different meanings; *note Mode Structure::).  Also, the combinations
`u+t', `g+t', and `o+s' have no effect.

   The `=' operator is not very useful with special permissions; for
example, the mode:

     o=t

does cause the file to be saved on the swap device, but it also removes
all read, write, and execute permissions that users not in the file's
group might have had for it.


File: fileutils.info,  Node: Conditional Executability,  Next: Multiple Changes,  Prev: Changing Special Permissions,  Up: Symbolic Modes

3.2.4 Conditional Executability
-------------------------------

There is one more special type of symbolic permission: if you use `X'
instead of `x', execute permission is affected only if the file already
had execute permission or is a directory.  It affects directories'
execute permission even if they did not initially have any execute
permissions set.

   For example, this mode:

     a+X

gives all users permission to execute files (or search directories) if
anyone could before.


File: fileutils.info,  Node: Multiple Changes,  Next: Umask and Protection,  Prev: Conditional Executability,  Up: Symbolic Modes

3.2.5 Making Multiple Changes
-----------------------------

The format of symbolic modes is actually more complex than described
above (*note Setting Permissions::).  It provides two ways to make
multiple changes to files' permissions.

   The first way is to specify multiple OPERATION and PERMISSIONS parts
after a USERS part in the symbolic mode.

   For example, the mode:

     og+rX-w

gives users other than the owner of the file read permission and, if it
is a directory or if someone already had execute permission to it,
gives them execute permission; and it also denies them write permission
to the file.  It does not affect the permission that the owner of the
file has for it.  The above mode is equivalent to the two modes:

     og+rX
     og-w

   The second way to make multiple changes is to specify more than one
simple symbolic mode, separated by commas.  For example, the mode:

     a+r,go-w

gives everyone permission to read the file and removes write permission
on it for all users except its owner.  Another example:

     u=rwx,g=rx,o=

sets all of the non-special permissions for the file explicitly.  (It
gives users who are not in the file's group no permission at all for
it.)

   The two methods can be combined.  The mode:

     a+r,g+x-w

gives all users permission to read the file, and gives users who are in
the file's group permission to execute it, as well, but not permission
to write to it.  The above mode could be written in several different
ways; another is:

     u+r,g+rx,o+r,g-w


File: fileutils.info,  Node: Umask and Protection,  Prev: Multiple Changes,  Up: Symbolic Modes

3.2.6 The Umask and Protection
------------------------------

If the USERS part of a symbolic mode is omitted, it defaults to `a'
(affect all users), except that any permissions that are _set_ in the
system variable `umask' are _not affected_.  The value of `umask' can
be set using the `umask' command.  Its default value varies from system
to system.

   Omitting the USERS part of a symbolic mode is generally not useful
with operations other than `+'.  It is useful with `+' because it
allows you to use `umask' as an easily customizable protection against
giving away more permission to files than you intended to.

   As an example, if `umask' has the value 2, which removes write
permission for users who are not in the file's group, then the mode:

     +w

adds permission to write to the file to its owner and to other users who
are in the file's group, but _not_ to other users.  In contrast, the
mode:

     a+w

ignores `umask', and _does_ give write permission for the file to all
users.


File: fileutils.info,  Node: Numeric Modes,  Prev: Symbolic Modes,  Up: File permissions

3.3 Numeric Modes
=================

File permissions are stored internally as integers.  As an alternative
to giving a symbolic mode, you can give an octal (base 8) number that
corresponds to the internal representation of the new mode.  This
number is always interpreted in octal; you do not have to add a leading
0, as you do in C.  Mode 0055 is the same as mode 55.

   A numeric mode is usually shorter than the corresponding symbolic
mode, but it is limited in that it cannot take into account a file's
previous permissions; it can only set them absolutely.

   On most systems, the permissions granted to the user, to other users
in the file's group, and to other users not in the file's group are
each stored as three bits, which are represented as one octal digit.
The three special permissions are also each stored as one bit, and they
are as a group represented as another octal digit.  Here is how the
bits are arranged, starting with the lowest valued bit:

     Value in  Corresponding
     Mode      Permission

               Other users not in the file's group:
        1      Execute
        2      Write
        4      Read

               Other users in the file's group:
       10      Execute
       20      Write
       40      Read

               The file's owner:
      100      Execute
      200      Write
      400      Read

               Special permissions:
     1000      Save text image on swap device
     2000      Set group ID on execution
     4000      Set user ID on execution

   For example, numeric mode 4755 corresponds to symbolic mode
`u=rwxs,go=rx', and numeric mode 664 corresponds to symbolic mode
`ug=rw,o=r'.  Numeric mode 0 corresponds to symbolic mode `ugo='.


File: fileutils.info,  Node: Date input formats,  Next: Directory listing,  Prev: File permissions,  Up: Top

4 Date input formats
********************

First, a quote:

     Our units of temporal measurement, from seconds on up to months,
     are so complicated, asymmetrical and disjunctive so as to make
     coherent mental reckoning in time all but impossible.  Indeed, had
     some tyrannical god contrived to enslave our minds to time, to
     make it all but impossible for us to escape subjection to sodden
     routines and unpleasant surprises, he could hardly have done
     better than handing down our present system.  It is like a set of
     trapezoidal building blocks, with no vertical or horizontal
     surfaces, like a language in which the simplest thought demands
     ornate constructions, useless particles and lengthy
     circumlocutions.  Unlike the more successful patterns of language
     and science, which enable us to face experience boldly or at least
     level-headedly, our system of temporal calculation silently and
     persistently encourages our terror of time.

     ...  It is as though architects had to measure length in feet,
     width in meters and height in ells; as though basic instruction
     manuals demanded a knowledge of five different languages.  It is
     no wonder then that we often look into our own immediate past or
     future, last Tuesday or a week from Sunday, with feelings of
     helpless confusion.  ...

     -- Robert Grudin, `Time and the Art of Living'.

   This section describes the textual date representations that GNU
programs accept.  These are the strings you, as a user, can supply as
arguments to the various programs.  The C interface (via the `getdate'
function) is not described here.

   Although the date syntax here can represent any possible time since
the year zero, computer integers often cannot represent such a wide
range of time.  On POSIX systems, the clock starts at 1970-01-01
00:00:00 UTC: POSIX does not require support for times before the POSIX
Epoch and times far in the future.  Traditional Unix systems have
32-bit signed `time_t' and can represent times from 1901-12-13 20:45:52
through 2038-01-19 03:14:07 UTC.  Systems with 64-bit signed `time_t'
can represent all the times in the known lifetime of the universe.

* Menu:

* General date syntax::            Common rules.
* Calendar date items::            19 Dec 1994.
* Time of day items::              9:20pm.
* Time zone items::                EST, PDT, GMT, ...
* Day of week items::              Monday and others.
* Relative items in date strings:: next tuesday, 2 years ago.
* Pure numbers in date strings::   19931219, 1440.
* Authors of getdate::             Bellovin, Eggert, Salz, Berets, et al.


File: fileutils.info,  Node: General date syntax,  Next: Calendar date items,  Up: Date input formats

4.1 General date syntax
=======================

A "date" is a string, possibly empty, containing many items separated
by whitespace.  The whitespace may be omitted when no ambiguity arises.
The empty string means the beginning of today (i.e., midnight).  Order
of the items is immaterial.  A date string may contain many flavors of
items:

   * calendar date items

   * time of the day items

   * time zone items

   * day of the week items

   * relative items

   * pure numbers.

We describe each of these item types in turn, below.

   A few numbers may be written out in words in most contexts.  This is
most useful for specifying day of the week items or relative items (see
below).  Here is the list: `first' for 1, `next' for 2, `third' for 3,
`fourth' for 4, `fifth' for 5, `sixth' for 6, `seventh' for 7, `eighth'
for 8, `ninth' for 9, `tenth' for 10, `eleventh' for 11 and `twelfth'
for 12.  Also, `last' means exactly -1.

   When a month is written this way, it is still considered to be
written numerically, instead of being "spelled in full"; this changes
the allowed strings.

   In the current implementation, only English is supported for words
and abbreviations like `AM', `DST', `EST', `first', `January',
`Sunday', `tomorrow', and `year'.

   The output of `date' is not always acceptable as a date string, not
only because of the language problem, but also because there is no
standard meaning for time zone items like `IST'.  When using `date' to
generate a date string intended to be parsed later, specify a date
format that is independent of language and that does not use time zone
items other than `UTC' and `Z'.  Here are some ways to do this:

     $ LC_ALL=C TZ=UTC0 date
     Fri Dec 15 19:48:05 UTC 2000
     $ TZ=UTC0 date +"%Y-%m-%d %H:%M:%SZ"
     2000-12-15 19:48:05Z
     $ date --iso-8601=seconds  # a GNU extension
     2000-12-15T11:48:05-0800
     $ date --rfc-822  # a GNU extension
     Fri, 15 Dec 2000 11:48:05 -0800
     $ date +"%Y-%m-%d %H:%M:%S %z"  # %z is a GNU extension.
     2000-12-15 11:48:05 -0800

   Alphabetic case is completely ignored in dates.  Comments may be
introduced between round parentheses, as long as included parentheses
are properly nested.  Hyphens not followed by a digit are currently
ignored.  Leading zeros on numbers are ignored.


File: fileutils.info,  Node: Calendar date items,  Next: Time of day items,  Prev: General date syntax,  Up: Date input formats

4.2 Calendar date items
=======================

A "calendar date item" specifies a day of the year.  It is specified
differently, depending on whether the month is specified numerically or
literally.  All these strings specify the same calendar date:

     1972-09-24     # ISO 8601.
     72-9-24        # Assume 19xx for 69 through 99,
                    # 20xx for 00 through 68.
     72-09-24       # Leading zeros are ignored.
     9/24/72        # Common U.S. writing.
     24 September 1972
     24 Sept 72     # September has a special abbreviation.
     24 Sep 72      # Three-letter abbreviations always allowed.
     Sep 24, 1972
     24-sep-72
     24sep72

   The year can also be omitted.  In this case, the last specified year
is used, or the current year if none.  For example:

     9/24
     sep 24

   Here are the rules.

   For numeric months, the ISO 8601 format `YEAR-MONTH-DAY' is allowed,
where YEAR is any positive number, MONTH is a number between 01 and 12,
and DAY is a number between 01 and 31.  A leading zero must be present
if a number is less than ten.  If YEAR is 68 or smaller, then 2000 is
added to it; otherwise, if YEAR is less than 100, then 1900 is added to
it.  The construct `MONTH/DAY/YEAR', popular in the United States, is
accepted.  Also `MONTH/DAY', omitting the year.

   Literal months may be spelled out in full: `January', `February',
`March', `April', `May', `June', `July', `August', `September',
`October', `November' or `December'.  Literal months may be abbreviated
to their first three letters, possibly followed by an abbreviating dot.
It is also permitted to write `Sept' instead of `September'.

   When months are written literally, the calendar date may be given as
any of the following:

     DAY MONTH YEAR
     DAY MONTH
     MONTH DAY YEAR
     DAY-MONTH-YEAR

   Or, omitting the year:

     MONTH DAY


File: fileutils.info,  Node: Time of day items,  Next: Time zone items,  Prev: Calendar date items,  Up: Date input formats

4.3 Time of day items
=====================

A "time of day item" in date strings specifies the time on a given day.
Here are some examples, all of which represent the same time:

     20:02:0
     20:02
     8:02pm
     20:02-0500      # In EST (U.S. Eastern Standard Time).

   More generally, the time of the day may be given as
`HOUR:MINUTE:SECOND', where HOUR is a number between 0 and 23, MINUTE
is a number between 0 and 59, and SECOND is a number between 0 and 59.
Alternatively, `:SECOND' can be omitted, in which case it is taken to
be zero.

   If the time is followed by `am' or `pm' (or `a.m.' or `p.m.'), HOUR
is restricted to run from 1 to 12, and `:MINUTE' may be omitted (taken
to be zero).  `am' indicates the first half of the day, `pm' indicates
the second half of the day.  In this notation, 12 is the predecessor of
1: midnight is `12am' while noon is `12pm'.  (This is the zero-oriented
interpretation of `12am' and `12pm', as opposed to the old tradition
derived from Latin which uses `12m' for noon and `12pm' for midnight.)

   The time may alternatively be followed by a time zone correction,
expressed as `SHHMM', where S is `+' or `-', HH is a number of zone
hours and MM is a number of zone minutes.  When a time zone correction
is given this way, it forces interpretation of the time relative to
Coordinated Universal Time (UTC), overriding any previous specification
for the time zone or the local time zone.  The MINUTE part of the time
of the day may not be elided when a time zone correction is used.  This
is the best way to specify a time zone correction by fractional parts
of an hour.

   Either `am'/`pm' or a time zone correction may be specified, but not
both.


File: fileutils.info,  Node: Time zone items,  Next: Day of week items,  Prev: Time of day items,  Up: Date input formats

4.4 Time zone items
===================

A "time zone item" specifies an international time zone, indicated by a
small set of letters, e.g., `UTC' or `Z' for Coordinated Universal
Time.  Any included periods are ignored.  By following a
non-daylight-saving time zone by the string `DST' in a separate word
(that is, separated by some white space), the corresponding daylight
saving time zone may be specified.

   Time zone items other than `UTC' and `Z' are obsolescent and are not
recommended, because they are ambiguous; for example, `EST' has a
different meaning in Australia than in the United States.  Instead,
it's better to use unambiguous numeric time zone corrections like
`-0500', as described in the previous section.


File: fileutils.info,  Node: Day of week items,  Next: Relative items in date strings,  Prev: Time zone items,  Up: Date input formats

4.5 Day of week items
=====================

The explicit mention of a day of the week will forward the date (only
if necessary) to reach that day of the week in the future.

   Days of the week may be spelled out in full: `Sunday', `Monday',
`Tuesday', `Wednesday', `Thursday', `Friday' or `Saturday'.  Days may
be abbreviated to their first three letters, optionally followed by a
period.  The special abbreviations `Tues' for `Tuesday', `Wednes' for
`Wednesday' and `Thur' or `Thurs' for `Thursday' are also allowed.

   A number may precede a day of the week item to move forward
supplementary weeks.  It is best used in expression like `third
monday'.  In this context, `last DAY' or `next DAY' is also acceptable;
they move one week before or after the day that DAY by itself would
represent.

   A comma following a day of the week item is ignored.


File: fileutils.info,  Node: Relative items in date strings,  Next: Pure numbers in date strings,  Prev: Day of week items,  Up: Date input formats

4.6 Relative items in date strings
==================================

"Relative items" adjust a date (or the current date if none) forward or
backward.  The effects of relative items accumulate.  Here are some
examples:

     1 year
     1 year ago
     3 years
     2 days

   The unit of time displacement may be selected by the string `year'
or `month' for moving by whole years or months.  These are fuzzy units,
as years and months are not all of equal duration.  More precise units
are `fortnight' which is worth 14 days, `week' worth 7 days, `day'
worth 24 hours, `hour' worth 60 minutes, `minute' or `min' worth 60
seconds, and `second' or `sec' worth one second.  An `s' suffix on
these units is accepted and ignored.

   The unit of time may be preceded by a multiplier, given as an
optionally signed number.  Unsigned numbers are taken as positively
signed.  No number at all implies 1 for a multiplier.  Following a
relative item by the string `ago' is equivalent to preceding the unit
by a multiplier with value -1.

   The string `tomorrow' is worth one day in the future (equivalent to
`day'), the string `yesterday' is worth one day in the past (equivalent
to `day ago').

   The strings `now' or `today' are relative items corresponding to
zero-valued time displacement, these strings come from the fact a
zero-valued time displacement represents the current time when not
otherwise changed by previous items.  They may be used to stress other
items, like in `12:00 today'.  The string `this' also has the meaning
of a zero-valued time displacement, but is preferred in date strings
like `this thursday'.

   When a relative item causes the resulting date to cross a boundary
where the clocks were adjusted, typically for daylight-saving time, the
resulting date and time are adjusted accordingly.


File: fileutils.info,  Node: Pure numbers in date strings,  Next: Authors of getdate,  Prev: Relative items in date strings,  Up: Date input formats

4.7 Pure numbers in date strings
================================

The precise interpretation of a pure decimal number depends on the
context in the date string.

   If the decimal number is of the form YYYYMMDD and no other calendar
date item (*note Calendar date items::) appears before it in the date
string, then YYYY is read as the year, MM as the month number and DD as
the day of the month, for the specified calendar date.

   If the decimal number is of the form HHMM and no other time of day
item appears before it in the date string, then HH is read as the hour
of the day and MM as the minute of the hour, for the specified time of
the day.  MM can also be omitted.

   If both a calendar date and a time of day appear to the left of a
number in the date string, but no relative item, then the number
overrides the year.


File: fileutils.info,  Node: Authors of getdate,  Prev: Pure numbers in date strings,  Up: Date input formats

4.8 Authors of `getdate'
========================

`getdate' was originally implemented by Steven M. Bellovin
(<smb@research.att.com>) while at the University of North Carolina at
Chapel Hill.  The code was later tweaked by a couple of people on
Usenet, then completely overhauled by Rich $alz (<rsalz@bbn.com>) and
Jim Berets (<jberets@bbn.com>) in August, 1990.  Various revisions for
the GNU system were made by David MacKenzie, Jim Meyering, Paul Eggert
and others.

   This chapter was originally produced by Franc,ois Pinard
(<pinard@iro.umontreal.ca>) from the `getdate.y' source code, and then
edited by K. Berry (<kb@cs.umb.edu>).


File: fileutils.info,  Node: Directory listing,  Next: Basic operations,  Prev: Date input formats,  Up: Top

5 Directory listing
*******************

This chapter describes the `ls' command and its variants `dir' and
`vdir', which list information about files.

* Menu:

* ls invocation::               List directory contents.
* dir invocation::              Briefly ls.
* vdir invocation::             Verbosely ls.
* dircolors invocation::        Color setup for ls, etc.


File: fileutils.info,  Node: ls invocation,  Next: dir invocation,  Up: Directory listing

5.1 `ls': List directory contents
=================================

The `ls' program lists information about files (of any type, including
directories).  Options and file arguments can be intermixed
arbitrarily, as usual.

   For non-option command-line arguments that are directories, by
default `ls' lists the contents of directories, not recursively, and
omitting files with names beginning with `.'.  For other non-option
arguments, by default `ls' lists just the file name.  If no non-option
arguments are specified, `ls' lists the contents of the current
directory.

   By default, the output is sorted alphabetically.  If standard output
is a terminal, the output is in columns (sorted vertically) and control
characters are output as question marks; otherwise, the output is listed
one per line and control characters are output as-is.

   Because `ls' is such a fundamental program, it has accumulated many
options over the years.  They are described in the subsections below;
within each section, options are listed alphabetically (ignoring case).
The division of options into the subsections is not absolute, since some
options affect more than one aspect of `ls''s operation.

   The `-g' option is accepted but ignored, for compatibility with
Unix.  Also see *note Common options::.

* Menu:

* Which files are listed::
* What information is listed::
* Sorting the output::
* More details about version sort::
* General output formatting::
* Formatting the file names::


File: fileutils.info,  Node: Which files are listed,  Next: What information is listed,  Up: ls invocation

5.1.1 Which files are listed
----------------------------

These options determine which files `ls' lists information for.  By
default, any files and the contents of any directories on the command
line are shown.

`-a'
`--all'
     List all files in directories, including files that start with `.'.

`-A'
`--almost-all'
     List all files in directories except for `.' and `..'.

`-B'
`--ignore-backups'
     Do not list files that end with `~', unless they are given on the
     command line.

`-d'
`--directory'
     List just the names of directories, as with other types of files,
     rather than listing their contents.

`-I PATTERN'
`--ignore=PATTERN'
     Do not list files whose names match the shell pattern (not regular
     expression) PATTERN unless they are given on the command line.  As
     in the shell, an initial `.' in a file name does not match a
     wildcard at the start of PATTERN.  Sometimes it is useful to give
     this option several times.  For example,

          $ ls --ignore='.??*' --ignore='.[^.]' --ignore='#*'

     The first option ignores names of length 3 or more that start with
     `.', the second ignores all two-character names that start with `.'
     except `..', and the third ignores names that start with `#'.

`-L'
`--dereference'
     In a long listing, show file information (e.g., times and
     permissions) for the referents of symbolic links rather than for
     the symbolic links themselves.

`-R'
`--recursive'
     List the contents of all directories recursively.



File: fileutils.info,  Node: What information is listed,  Next: Sorting the output,  Prev: Which files are listed,  Up: ls invocation

5.1.2 What information is listed
--------------------------------

These options affect the information that `ls' displays.  By default,
only file names are shown.

`-D'
`--dired'
     With the long listing (`-l') format, print an additional line after
     the main output:

          //DIRED// BEG1 END1 BEG2 END2 ...

     The BEGN and ENDN are unsigned integers that record the byte
     position of the beginning and end of each file name in the output.
     This makes it easy for Emacs to find the names, even when they
     contain unusual characters such as space or newline, without fancy
     searching.

     If directories are being listed recursively (`-R'), output a
     similar line after each subdirectory:
          //SUBDIRED// FORMAT BEG1 END1 ...

     Finally, output a line of the form:
          //DIRED-OPTIONS// --quoting-style=WORD
     where WORD is the quoting style (*note Formatting the file
     names::).

`-G'
`--no-group'
     Inhibit display of group information in a long format directory
     listing.  (This is the default in some non-GNU versions of `ls',
     so we provide this option for compatibility.)

`-h'
`--human-readable'
     Append a size letter such as `M' for megabytes to each size.
     Powers of 1024 are used, not 1000; `M' stands for 1,048,576 bytes.
     Use the `--si' option if you prefer powers of 1000.

`-H'
`--si'
     Append a size letter such as `M' for megabytes to each size.  (SI
     is the International System of Units, which defines these letters
     as prefixes.)  Powers of 1000 are used, not 1024; `M' stands for
     1,000,000 bytes.  Use the `-h' or `--human-readable' option if you
     prefer powers of 1024.

     Warning: the meaning of `-H' will change in the future to conform
     to POSIX.  Use `--si' for the old meaning.

`-i'
`--inode'
     Print the inode number (also called the file serial number and
     index number) of each file to the left of the file name.  (This
     number uniquely identifies each file within a particular
     filesystem.)

`-l'
`--format=long'
`--format=verbose'
     In addition to the name of each file, print the file type,
     permissions, number of hard links, owner name, group name, size in
     bytes, and timestamp (by default, the modification time).  For
     files with a time more than six months old or in the future, the
     timestamp contains the year instead of the time of day.  If the
     timestamp contains today's date with the year rather than a time
     of day, the file's time is in the future, which means you probably
     have clock skew problems which may break programs like `make' that
     rely on file times.

     For each directory that is listed, preface the files with a line
     `total BLOCKS', where BLOCKS is the total disk allocation for all
     files in that directory.  The block size currently defaults to 1024
     bytes, but this can be overridden (*note Block size::).  The
     BLOCKS computed counts each hard link separately; this is arguably
     a deficiency.

     The permissions listed are similar to symbolic mode specifications
     (*note Symbolic Modes::).  But `ls' combines multiple bits into the
     third character of each set of permissions as follows:
    `s'
          If the setuid or setgid bit and the corresponding executable
          bit are both set.

    `S'
          If the setuid or setgid bit is set but the corresponding
          executable bit is not set.

    `t'
          If the sticky bit and the other-executable bit are both set.

    `T'
          If the sticky bit is set but the other-executable bit is not
          set.

    `x'
          If the executable bit is set and none of the above apply.

    `-'
          Otherwise.

     Following the permission bits is a single character that specifies
     whether an alternate access method applies to the file.  When that
     character is a space, there is no alternate access method.  When it
     is a printing character (e.g., `+'), then there is such a method.

`-o'
     Produce long format directory listings, but don't display group
     information.  It is equivalent to using `--format=long' with
     `--no-group' .  This option is provided for compatibility with
     other versions of `ls'.

`-s'
`--size'
     Print the disk allocation of each file to the left of the file
     name.  This is the amount of disk space used by the file, which is
     usually a bit more than the file's size, but it can be less if the
     file has holes.

     Normally the disk allocation is printed in units of 1024 bytes,
     but this can be overridden (*note Block size::).

     For files that are NFS-mounted from an HP-UX system to a BSD
     system, this option reports sizes that are half the correct
     values.  On HP-UX systems, it reports sizes that are twice the
     correct values for files that are NFS-mounted from BSD systems.
     This is due to a flaw in HP-UX; it also affects the HP-UX `ls'
     program.



File: fileutils.info,  Node: Sorting the output,  Next: More details about version sort,  Prev: What information is listed,  Up: ls invocation

5.1.3 Sorting the output
------------------------

These options change the order in which `ls' sorts the information it
outputs.  By default, sorting is done by character code (e.g., ASCII
order).

`-c'
`--time=ctime'
`--time=status'
`--time=use'
     If the long listing format (e.g., `-l', `-o') is being used, print
     the status change time (the `ctime' in the inode) instead of the
     modification time.  When explicitly sorting by time (`--sort=time'
     or `-t') or when not using a long listing format, sort according
     to the status change time.

`-f'
     Primarily, like `-U'--do not sort; list the files in whatever
     order they are stored in the directory.  But also enable `-a' (list
     all files) and disable `-l', `--color', and `-s' (if they were
     specified before the `-f').

`-r'
`--reverse'
     Reverse whatever the sorting method is--e.g., list files in reverse
     alphabetical order, youngest first, smallest first, or whatever.

`-S'
`--sort=size'
     Sort by file size, largest first.

`-t'
`--sort=time'
     Sort by modification time (the `mtime' in the inode), newest first.

`-u'
`--time=atime'
`--time=access'
     If the long listing format (e.g., `--format=long') is being used,
     print the last access time (the `atime' in the inode).  When
     explicitly sorting by time (`--sort=time' or `-t') or when not
     using a long listing format, sort according to the access time.

`-U'
`--sort=none'
     Do not sort; list the files in whatever order they are stored in
     the directory.  (Do not do any of the other unrelated things that
     `-f' does.)  This is especially useful when listing very large
     directories, since not doing any sorting can be noticeably faster.

`-v'
`--sort=version'
     Sort by version name and number, lowest first.  It behaves like a
     default sort, except that each sequence of decimal digits is
     treated numerically as an index/version number.  (*Note More
     details about version sort::.)

`-X'
`--sort=extension'
     Sort directory contents alphabetically by file extension
     (characters after the last `.'); files with no extension are
     sorted first.



File: fileutils.info,  Node: More details about version sort,  Next: General output formatting,  Prev: Sorting the output,  Up: ls invocation

5.1.4 More details about version sort
-------------------------------------

The version sort takes into account the fact that file names frequently
include indices or version numbers.  Standard sorting functions usually
do not produce the ordering that people expect because comparisons are
made on a character-by-character basis.  The version sort addresses
this problem, and is especially useful when browsing directories that
contain many files with indices/version numbers in their names:

           > ls -1            > ls -1v
           foo.zml-1.gz       foo.zml-1.gz
           foo.zml-100.gz     foo.zml-2.gz
           foo.zml-12.gz      foo.zml-6.gz
           foo.zml-13.gz      foo.zml-12.gz
           foo.zml-2.gz       foo.zml-13.gz
           foo.zml-25.gz      foo.zml-25.gz
           foo.zml-6.gz       foo.zml-100.gz

   Note also that numeric parts with leading zeroes are considered as
fractional one:

           > ls -1            > ls -1v
           abc-1.007.tgz      abc-1.007.tgz
           abc-1.012b.tgz     abc-1.01a.tgz
           abc-1.01a.tgz      abc-1.012b.tgz


File: fileutils.info,  Node: General output formatting,  Next: Formatting the file names,  Prev: More details about version sort,  Up: ls invocation

5.1.5 General output formatting
-------------------------------

These options affect the appearance of the overall output.

`-1'
`--format=single-column'
     List one file per line.  This is the default for `ls' when standard
     output is not a terminal.

`-C'
`--format=vertical'
     List files in columns, sorted vertically.  This is the default for
     `ls' if standard output is a terminal.  It is always the default
     for the `dir' and `d' programs.  GNU `ls' uses variable width
     columns to display as many files as possible in the fewest lines.

`--color [=WHEN]'
     Specify whether to use color for distinguishing file types.  WHEN
     may be omitted, or one of:
        * none - Do not use color at all.  This is the default.

        * auto - Only use color if standard output is a terminal.

        * always - Always use color.
     Specifying `--color' and no WHEN is equivalent to `--color=always'.
     Piping a colorized listing through a pager like `more' or `less'
     usually produces unreadable results.  However, using `more -f'
     does seem to work.

`-F'
`--classify'
`--indicator-style=classify'
     Append a character to each file name indicating the file type.
     Also, for regular files that are executable, append `*'.  The file
     type indicators are `/' for directories, `@' for symbolic links,
     `|' for FIFOs, `=' for sockets, and nothing for regular files.

`--full-time'
     List times in full, rather than using the standard abbreviation
     heuristics.  The format is currently similar to that of `date',
     but this is planned to change in a future release, partly because
     modern file time stamps have more precision.  It's not possible to
     change the format, but you can extract out the date string with
     `cut' and then pass the result to `date -d'.  *Note `date'
     invocation: (sh-utils)date invocation.

     This is most useful because the time output includes the seconds.
     (Unix filesystems store file timestamps only to the nearest
     second, so this option shows all the information there is.)  For
     example, this can help when you have a Makefile that is not
     regenerating files properly.

`--indicator-style=WORD'
     Append a character indicator with style WORD to entry names, as
     follows:
    `none'
          Do not append any character indicator; this is the default.

    `file-type'
          Append `/' for directories, `@' for symbolic links, `|' for
          FIFOs, `=' for sockets, and nothing for regular files.  This
          is the same as the `-p' or `--file-type' option.

    `classify'
          Append `*' for executable regular files, otherwise behave as
          for `file-type'.  This is the same as the `-F' or
          `--classify' option.

`-k'
`--kilobytes'
     Print file sizes in 1024-byte blocks, overriding the default block
     size (*note Block size::).

`-m'
`--format=commas'
     List files horizontally, with as many as will fit on each line,
     separated by `, ' (a comma and a space).

`-n'
`--numeric-uid-gid'
     List the numeric UID and GID instead of the names.

`-p'
`--file-type'
`--indicator-style=file-type'
     Append a character to each file name indicating the file type.
     This is like `-F', except that executables are not marked.

`-x FORMAT'
`--format=across'
`--format=horizontal'
     List the files in columns, sorted horizontally.

`-T COLS'
`--tabsize=COLS'
     Assume that each tabstop is COLS columns wide.  The default is 8.
     `ls' uses tabs where possible in the output, for efficiency.  If
     COLS is zero, do not use tabs at all.

`-w'
`--width=COLS'
     Assume the screen is COLS columns wide.  The default is taken from
     the terminal settings if possible; otherwise the environment
     variable `COLUMNS' is used if it is set; otherwise the default is
     80.



File: fileutils.info,  Node: Formatting the file names,  Prev: General output formatting,  Up: ls invocation

5.1.6 Formatting the file names
-------------------------------

These options change how file names themselves are printed.

`-b'
`--escape'
`--quoting-style=escape'
     Quote nongraphic characters in file names using alphabetic and
     octal backslash sequences like those used in C.

`-N'
`--literal'
     Do not quote file names.

`-q'
`--hide-control-chars'
     Print question marks instead of nongraphic characters in file
     names.  This is the default if the output is a terminal and the
     program is `ls'.

`-Q'
`--quote-name'
`--quoting-style=c'
     Enclose file names in double quotes and quote nongraphic
     characters as in C.

`--quoting-style=WORD'
     Use style WORD to quote output names.  The WORD should be one of
     the following:
    `literal'
          Output names as-is.

    `shell'
          Quote names for the shell if they contain shell
          metacharacters or would cause ambiguous output.

    `shell-always'
          Quote names for the shell, even if they would normally not
          require quoting.

    `c'
          Quote names as for a C language string; this is the same as
          the `-Q' or `--quote-name' option.

    `escape'
          Quote as with `c' except omit the surrounding double-quote
          characters; this is the same as the `-b' or `--escape' option.

    `clocale'
          Quote as with `c' except use quotation marks appropriate for
          the locale.

    `locale'
          Like `clocale', but quote `like this' instead of "like this"
          in the default C locale.  This looks nicer on many displays.

     You can specify the default value of the `--quoting-style' option
     with the environment variable `QUOTING_STYLE'.  If that environment
     variable is not set, the default value is `literal', but this
     default may change to `shell' in a future version of this package.

`--show-control-chars'
     Print nongraphic characters as-is in file names.  This is the
     default unless the output is a terminal and the program is `ls'.



File: fileutils.info,  Node: dir invocation,  Next: vdir invocation,  Prev: ls invocation,  Up: Directory listing

5.2 `dir': Briefly list directory contents
==========================================

`dir' (also installed as `d') is equivalent to `ls -C -b'; that is, by
default files are listed in columns, sorted vertically, and special
characters are represented by backslash escape sequences.

   *Note `ls': ls invocation.


File: fileutils.info,  Node: vdir invocation,  Next: dircolors invocation,  Prev: dir invocation,  Up: Directory listing

5.3 `vdir': Verbosely list directory contents
=============================================

`vdir' (also installed as `v') is equivalent to `ls -l -b'; that is, by
default files are listed in long format and special characters are
represented by backslash escape sequences.


File: fileutils.info,  Node: dircolors invocation,  Prev: vdir invocation,  Up: Directory listing

5.4 `dircolors': Color setup for `ls'
=====================================

`dircolors' outputs a sequence of shell commands to set up the terminal
for color output from `ls' (and `dir', etc.).  Typical usage:

     eval `dircolors [OPTION]... [FILE]`

   If FILE is specified, `dircolors' reads it to determine which colors
to use for which file types and extensions.  Otherwise, a precompiled
database is used.  For details on the format of these files, run
`dircolors --print-database'.

   The output is a shell command to set the `LS_COLORS' environment
variable.  You can specify the shell syntax to use on the command line,
or `dircolors' will guess it from the value of the `SHELL' environment
variable.

   The program accepts the following options.  Also see *note Common
options::.

`-b'
`--sh'
`--bourne-shell'
     Output Bourne shell commands.  This is the default if the `SHELL'
     environment variable is set and does not end with `csh' or `tcsh'.

`-c'
`--csh'
`--c-shell'
     Output C shell commands.  This is the default if `SHELL' ends with
     `csh' or `tcsh'.

`-p'
`--print-database'
     Print the (compiled-in) default color configuration database.  This
     output is itself a valid configuration file, and is fairly
     descriptive of the possibilities.



File: fileutils.info,  Node: Basic operations,  Next: Special file types,  Prev: Directory listing,  Up: Top

6 Basic operations
******************

This chapter describes the commands for basic file manipulation:
copying, moving (renaming), and deleting (removing).

* Menu:

* cp invocation::               Copy files.
* dd invocation::               Convert and copy a file.
* install invocation::          Copy files and set attributes.
* mv invocation::               Move (rename) files.
* rm invocation::               Remove files or directories.
* shred invocation::            Remove files more securely.


File: fileutils.info,  Node: cp invocation,  Next: dd invocation,  Up: Basic operations

6.1 `cp': Copy files and directories
====================================

`cp' copies files (or, optionally, directories).  The copy is
completely independent of the original.  You can either copy one file to
another, or copy arbitrarily many files to a destination directory.
Synopsis:

     cp [OPTION]... SOURCE DEST
     cp [OPTION]... SOURCE... DIRECTORY

   If the last argument names an existing directory, `cp' copies each
SOURCE file into that directory (retaining the same name).  Otherwise,
if only two files are given, it copies the first onto the second.  It
is an error if the last argument is not a directory and more than two
non-option arguments are given.

   Generally, files are written just as they are read.  For exceptions,
see the `--sparse' option below.

   By default, `cp' does not copy directories.  However, the `-R',
`-a', and `-r' options cause `cp' to copy recursively by descending
into source directories and copying files to corresponding destination
directories.

   By default, `cp' follows symbolic links only when not copying
recursively.  This default can be overridden with the
`--no-dereference' (`-d'), `--dereference' (`-L'), and `-H' options.
If more than one of these options is specified, the last one silently
overrides the others.

   `cp' generally refuses to copy a file onto itself, with the
following exception: if `--force --backup' is specified with SOURCE and
DEST identical, and referring to a regular file, `cp' will make a
backup file, either regular or numbered, as specified in the usual ways
(*note Backup options::).  This is useful when you simply want to make
a backup of an existing file before changing it.

   The program accepts the following options.  Also see *note Common
options::.

`-a'
`--archive'
     Preserve as much as possible of the structure and attributes of the
     original files in the copy (but do not attempt to preserve internal
     directory structure;  i.e., `ls -U' may list the entries in a
     copied directory in a different order).  Equivalent to `-dpR'.

`-b'
`--backup[=METHOD]'
     *Note Backup options::.  Make a backup of each file that would
     otherwise be overwritten or removed.  As a special case, `cp'
     makes a backup of SOURCE when the force and backup options are
     given and SOURCE and DEST are the same name for an existing,
     regular file.  One useful application of this combination of
     options is this tiny Bourne shell script:

          #!/bin/sh
          # Usage: backup FILE...
          # Create a GNU-style backup of each listed FILE.
          for i in "$;" do
            cp --backup --force "$i" "$i"
          done

`-d'
`--no-dereference'
     Copy symbolic links as symbolic links rather than copying the
     files that they point to, and preserve hard links between source
     files in the copies.

`-f'
`--force'
     When copying without this option and an existing destination file
     cannot be opened for writing, the copy fails.  However, with
     `--force'), when a destination file cannot be opened, `cp' then
     unlinks it and tries to open it again.  Contrast this behavior
     with that enabled by `--link' and `--symbolic-link', whereby the
     destination file is never opened but rather is unlinked
     unconditionally.  Also see the description of
     `--remove-destination'.

`-H'
     If a command line argument specifies a symbolic link, then copy the
     file it points to rather than the symbolic link itself.  However,
     copy (preserving its nature) any symbolic link that is encountered
     via recursive traversal.

`-i'
`--interactive'
     Prompt whether to overwrite existing regular destination files.

`-l'
`--link'
     Make hard links instead of copies of non-directories.

`-L'
`--dereference'
     Always follow symbolic links.

`-p'
`--preserve'
     Preserve the original files' owner, group, permissions, and
     timestamps.  In the absence of this option, each destination file
     is created with the permissions of the corresponding source file,
     minus the bits set in the umask. *Note File permissions::.

`-P'
`--parents'
     Form the name of each destination file by appending to the target
     directory a slash and the specified name of the source file.  The
     last argument given to `cp' must be the name of an existing
     directory.  For example, the command:

          cp --parents a/b/c existing_dir

     copies the file `a/b/c' to `existing_dir/a/b/c', creating any
     missing intermediate directories.

     Warning: the meaning of `-P' will change in the future to conform
     to POSIX.  Use `--parents' for the old meaning, and
     `--no-dereference' for the new.

`-r'
     Copy directories recursively, copying any non-directories and
     special files (e.g., symbolic links, FIFOs and device files) as if
     they were regular files.  This means trying to read the data in
     each source file and writing it to the destination.  It is usually
     a mistake to apply `cp -r' to special files like FIFOs and the
     ones typically found in the `/dev' directory.  In most cases, `cp
     -r' will hang indefinitely trying to read from FIFOs and special
     files like `/dev/console', and it will fill up your destination
     disk if you use it to copy `/dev/zero'.  Use the `--recursive'
     (`-R') option instead if you want to copy special files,
     preserving their special nature rather than reading from them to
     copy their contents.

`-R'
`--recursive'
     Copy directories recursively, preserving non-directories (contrast
     with `-r' just above).

`--remove-destination'
     Remove each existing destination file before attempting to open it
     (contrast with `-f' above).

`--sparse=WHEN'
     A "sparse file" contains "holes"--a sequence of zero bytes that
     does not occupy any physical disk blocks; the `read' system call
     reads these as zeroes.  This can both save considerable disk space
     and increase speed, since many binary files contain lots of
     consecutive zero bytes.  By default, `cp' detects holes in input
     source files via a crude heuristic and makes the corresponding
     output file sparse as well.

     The WHEN value can be one of the following:
    `auto'
          The default behavior: the output file is sparse if the input
          file is sparse.

    `always'
          Always make the output file sparse.  This is useful when the
          input file resides on a filesystem that does not support
          sparse files (the most notable example is `efs' filesystems
          in SGI IRIX 5.3 and earlier), but the output file is on
          another type of filesystem.

    `never'
          Never make the output file sparse.  This is useful in
          creating a file for use with the `mkswap' command, since such
          a file must not have any holes.

`--strip-trailing-slashes'
     Remove any trailing slashes from each SOURCE argument.  *Note
     Trailing slashes::.

`-s'
`--symbolic-link'
     Make symbolic links instead of copies of non-directories.  All
     source file names must be absolute (starting with `/') unless the
     destination files are in the current directory.  This option merely
     results in an error message on systems that do not support
     symbolic links.

`-S SUFFIX'
`--suffix=SUFFIX'
     Append SUFFIX to each backup file made with `-b'.  *Note Backup
     options::.

`--target-directory=DIRECTORY'
     Specify the destination DIRECTORY.  *Note Target directory::.

`-v'
`--verbose'
     Print the name of each file before copying it.

`-V METHOD'
`--version-control=METHOD'
     Change the type of backups made with `-b'.  The METHOD argument
     can be `none' (or `off'), `numbered' (or `t'), `existing' (or
     `nil'), or `never' (or `simple').  *Note Backup options::.

`-x'
`--one-file-system'
     Skip subdirectories that are on different filesystems from the one
     that the copy started on.  However, mount point directories _are_
     copied.



File: fileutils.info,  Node: dd invocation,  Next: install invocation,  Prev: cp invocation,  Up: Basic operations

6.2 `dd': Convert and copy a file
=================================

`dd' copies a file (from standard input to standard output, by default)
with a changeable I/O block size, while optionally performing
conversions on it.  Synopsis:

     dd [OPTION]...

   The program accepts the following options.  Also see *note Common
options::.

   The numeric-valued options below (BYTES and BLOCKS) can be followed
by a multiplier: `b'=512, `c'=1, `w'=2, `xM'=M, or any of the standard
block size suffixes like `k'=1024 (*note Block size::).

   Use different `dd' invocations to use different block sizes for
skipping and I/O.  For example, the following shell commands copy data
in 512 kB blocks between a disk and a tape, but do not save or restore a
4 kB label at the start of the disk:

     disk=/dev/rdsk/c0t1d0s2
     tape=/dev/rmt/0

     # Copy all but the label from disk to tape.
     (dd bs=4k skip=1 count=0 && dd bs=512k) <$disk >$tape

     # Copy from tape back to disk, but leave the disk label alone.
     (dd bs=4k seek=1 count=0 && dd bs=512k) <$tape >$disk

`if=FILE'
     Read from FILE instead of standard input.

`of=FILE'
     Write to FILE instead of standard output.  Unless `conv=notrunc'
     is given, `dd' truncates FILE to zero bytes (or the size specified
     with `seek=').

`ibs=BYTES'
     Read BYTES bytes at a time.

`obs=BYTES'
     Write BYTES bytes at a time.

`bs=BYTES'
     Both read and write BYTES bytes at a time.  This overrides `ibs'
     and `obs'.

`cbs=BYTES'
     Convert BYTES bytes at a time.

`skip=BLOCKS'
     Skip BLOCKS `ibs'-byte blocks in the input file before copying.

`seek=BLOCKS'
     Skip BLOCKS `obs'-byte blocks in the output file before copying.

`count=BLOCKS'
     Copy BLOCKS `ibs'-byte blocks from the input file, instead of
     everything until the end of the file.

`conv=CONVERSION[,CONVERSION]...'
     Convert the file as specified by the CONVERSION argument(s).  (No
     spaces around any comma(s).)

     Conversions:

    `ascii'
          Convert EBCDIC to ASCII.

    `ebcdic'
          Convert ASCII to EBCDIC.

    `ibm'
          Convert ASCII to alternate EBCDIC.

    `block'
          For each line in the input, output `cbs' bytes, replacing the
          input newline with a space and padding with spaces as
          necessary.

    `unblock'
          Replace trailing spaces in each `cbs'-sized input block with a
          newline.

    `lcase'
          Change uppercase letters to lowercase.

    `ucase'
          Change lowercase letters to uppercase.

    `swab'
          Swap every pair of input bytes.  GNU `dd', unlike others,
          works when an odd number of bytes are read--the last byte is
          simply copied (since there is nothing to swap it with).

    `noerror'
          Continue after read errors.

    `notrunc'
          Do not truncate the output file.

    `sync'
          Pad every input block to size of `ibs' with trailing zero
          bytes.  When use with `block' or `unblock', pad with spaces
          instead of zero bytes.



File: fileutils.info,  Node: install invocation,  Next: mv invocation,  Prev: dd invocation,  Up: Basic operations

6.3 `install': Copy files and set attributes
============================================

`install' copies files while setting their permission modes and, if
possible, their owner and group.  Synopses:

     install [OPTION]... SOURCE DEST
     install [OPTION]... SOURCE... DIRECTORY
     install -d [OPTION]... DIRECTORY...

   In the first of these, the SOURCE file is copied to the DEST target
file.  In the second, each of the SOURCE files are copied to the
destination DIRECTORY.  In the last, each DIRECTORY (and any missing
parent directories) is created.

   `install' is similar to `cp', but allows you to control the
attributes of destination files.  It is typically used in Makefiles to
copy programs into their destination directories.  It refuses to copy
files onto themselves.

   The program accepts the following options.  Also see *note Common
options::.

`-b'
`--backup[=METHOD]'
     *Note Backup options::.  Make a backup of each file that would
     otherwise be overwritten or removed.

`-c'
     Ignored; for compatibility with old Unix versions of `install'.

`-d'
`--directory'
     Create each given directory and any missing parent directories,
     setting the owner, group and mode as given on the command line or
     to the defaults.  It also gives any parent directories it creates
     those attributes.  (This is different from the SunOS 4.x
     `install', which gives directories that it creates the default
     attributes.)

`-g GROUP'
`--group=GROUP'
     Set the group ownership of installed files or directories to
     GROUP. The default is the process' current group.  GROUP may be
     either a group name or a numeric group id.

`-m MODE'
`--mode=MODE'
     Set the permissions for the installed file or directory to MODE,
     which can be either an octal number, or a symbolic mode as in
     `chmod', with 0 as the point of departure (*note File
     permissions::).  The default mode is `u=rwx,go=rx'--read, write,
     and execute for the owner, and read and execute for group and
     other.

`-o OWNER'
`--owner=OWNER'
     If `install' has appropriate privileges (is run as root), set the
     ownership of installed files or directories to OWNER. The default
     is `root'.  OWNER may be either a user name or a numeric user ID.

`-p'
`--preserve-timestamps'
     Set the time of last access and the time of last modification of
     each installed file to match those of each corresponding original
     file.  When a file is installed without this option, its last
     access and last modification times are both set to the time of
     installation.  This option is useful if you want to use the last
     modification times of installed files to keep track of when they
     were last built as opposed to when they were last installed.

`-s'
`--strip'
     Strip the symbol tables from installed binary executables.

`-S SUFFIX'
`--suffix=SUFFIX'
     Append SUFFIX to each backup file made with `-b'.  *Note Backup
     options::.

`--target-directory=DIRECTORY'
     Specify the destination DIRECTORY.  *Note Target directory::.

`-v'
`--verbose'
     Print the name of each file before copying it.

`-V METHOD'
`--version-control=METHOD'
     Change the type of backups made with `-b'.  The METHOD argument
     can be `none' (or `off'), `numbered' (or `t'), `existing' (or
     `nil'), or `never' (or `simple').  *Note Backup options::.



File: fileutils.info,  Node: mv invocation,  Next: rm invocation,  Prev: install invocation,  Up: Basic operations

6.4 `mv': Move (rename) files
=============================

`mv' moves or renames files (or directories).  Synopsis:

     mv [OPTION]... SOURCE DEST
     mv [OPTION]... SOURCE... DIRECTORY

   If the last argument names an existing directory, `mv' moves each
other given file into a file with the same name in that directory.
Otherwise, if only two files are given, it renames the first as the
second.  It is an error if the last argument is not a directory and
more than two files are given.

   `mv' can move any type of file from one filesystem to another.
Prior to version `4.0' of the fileutils, `mv' could move only regular
files between filesystems.  For example, now `mv' can move an entire
directory hierarchy including special device files from one partition
to another.  It first uses some of the same code that's used by `cp -a'
to copy the requested directories and files, then (assuming the copy
succeeded) it removes the originals.  If the copy fails, then the part
that was copied to the destination partition is removed.  If you were
to copy three directories from one partition to another and the copy of
the first directory succeeded, but the second didn't, the first would
be left on the destination partion and the second and third would be
left on the original partition.

   If a destination file exists but is normally unwritable, standard
input is a terminal, and the `-f' or `--force' option is not given,
`mv' prompts the user for whether to replace the file.  (You might own
the file, or have write permission on its directory.)  If the response
does not begin with `y' or `Y', the file is skipped.

   _Warning_: If you try to move a symlink that points to a directory,
and you specify the symlink with a trailing slash, then `mv' doesn't
move the symlink but instead moves the directory referenced by the
symlink.  *Note Trailing slashes::.

   The program accepts the following options.  Also see *note Common
options::.

`-b'
`--backup[=METHOD]'
     *Note Backup options::.  Make a backup of each file that would
     otherwise be overwritten or removed.

`-f'
`--force'
     Do not prompt the user before removing an unwritable destination
     file.

`-i'
`--interactive'
     Prompt whether to overwrite each existing destination file,
     regardless of its permissions.  If the response does not begin
     with `y' or `Y', the file is skipped.

`-u'
`--update'
     Do not move a nondirectory that has an existing destination with
     the same or newer modification time.

`-v'
`--verbose'
     Print the name of each file before moving it.

`--strip-trailing-slashes'
     Remove any trailing slashes from each SOURCE argument.  *Note
     Trailing slashes::.

`-S SUFFIX'
`--suffix=SUFFIX'
     Append SUFFIX to each backup file made with `-b'.  *Note Backup
     options::.

`--target-directory=DIRECTORY'
     Specify the destination DIRECTORY.  *Note Target directory::.

`-V METHOD'
`--version-control=METHOD'
     Change the type of backups made with `-b'.  The METHOD argument
     can be `none' (or `off'), `numbered' (or `t'), `existing' (or
     `nil'), or `never' (or `simple').  *Note Backup options::.



File: fileutils.info,  Node: rm invocation,  Next: shred invocation,  Prev: mv invocation,  Up: Basic operations

6.5 `rm': Remove files or directories
=====================================

`rm' removes each given FILE.  By default, it does not remove
directories.  Synopsis:

     rm [OPTION]... [FILE]...

   If a file is unwritable, standard input is a terminal, and the `-f'
or `--force' option is not given, or the `-i' or `--interactive' option
_is_ given, `rm' prompts the user for whether to remove the file.  If
the response does not begin with `y' or `Y', the file is skipped.

   The program accepts the following options.  Also see *note Common
options::.

`-d'
`--directory'
     Attempt to remove directories with `unlink' instead of `rmdir', and
     don't require a directory to be empty before trying to unlink it.
     This works only if you have appropriate privileges and if your
     operating system supports `unlink' for directories.  Because
     unlinking a directory causes any files in the deleted directory to
     become unreferenced, it is wise to `fsck' the filesystem after
     doing this.

`-f'
`--force'
     Ignore nonexistent files and never prompt the user.  Ignore any
     previous `--interactive' (`-i') option.

`-i'
`--interactive'
     Prompt whether to remove each file.  If the response does not begin
     with `y' or `Y', the file is skipped.  Ignore any previous
     `--force' (`-f') option.

`-r'
`-R'
`--recursive'
     Remove the contents of directories recursively.

`-v'
`--verbose'
     Print the name of each file before removing it.


   One common question is how to remove files whose names begin with a
`-'.  GNU `rm', like every program that uses the `getopt' function to
parse its arguments, lets you use the `--' option to indicate that all
following arguments are non-options.  To remove a file called `-f' in
the current directory, you could type either:

     rm -- -f

or:

     rm ./-f

   The Unix `rm' program's use of a single `-' for this purpose
predates the development of the getopt standard syntax.


File: fileutils.info,  Node: shred invocation,  Prev: rm invocation,  Up: Basic operations

6.6 `shred': Remove files more securely
=======================================

`shred' overwrites devices or files, to help prevent even very
expensive hardware from recovering the data.

   Ordinarily when you remove a file (*note rm invocation::), the data
is not actually destroyed.  Only the index listing where the file is
stored is destroyed, and the storage is made available for reuse.
There are undelete utilities that will attempt to reconstruct the index
and can bring the file back if the parts were not reused.

   On a busy system with a nearly-full drive, space can get reused in a
few seconds.  But there is no way to know for sure.  If you have
sensitive data, you may want to be sure that recovery is not possible
by actually overwriting the file with non-sensitive data.

   However, even after doing that, it is possible to take the disk back
to a laboratory and use a lot of sensitive (and expensive) equipment to
look for the faint "echoes" of the original data underneath the
overwritten data.  If the data has only been overwritten once, it's not
even that hard.

   The best way to remove something irretrievably is to destroy the
media it's on with acid, melt it down, or the like.  For cheap
removable media like floppy disks, this is the preferred method.
However, hard drives are expensive and hard to melt, so the `shred'
utility tries to achieve a similar effect non-destructively.

   This uses many overwrite passes, with the data patterns chosen to
maximize the damage they do to the old data.  While this will work on
floppies, the patterns are designed for best effect on hard drives.
For more details, see the source code and Peter Gutmann's paper `Secure
Deletion of Data from Magnetic and Solid-State Memory', from the
proceedings of the Sixth USENIX Security Symposium (San Jose,
California, 22-25 July, 1996).  The paper is also available online
`http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html'.

   *Please note* that `shred' relies on a very important assumption:
that the filesystem overwrites data in place.  This is the traditional
way to do things, but many modern filesystem designs do not satisfy this
assumption.  Exceptions include:

   * Log-structured or journaled filesystems, such as those supplied
     with AIX and Solaris.

   * Filesystems that write redundant data and carry on even if some
     writes fail, such as RAID-based filesystems.

   * Filesystems that make snapshots, such as Network Appliance's NFS
     server.

   * Filesystems that cache in temporary locations, such as NFS version
     3 clients.

   * Compressed filesystems.

   If you are not sure how your filesystem operates, then you should
assume that it does not overwrite data in place, which means that shred
cannot reliably operate on regular files in your filesystem.

   Generally speaking, it is more reliable to shred a device than a
file, since this bypasses the problem of filesystem design mentioned
above.  However, even shredding devices is not always completely
reliable.  For example, most disks map out bad sectors invisibly to the
application; if the bad sectors contain sensitive data, `shred' won't
be able to destroy it.

   `shred' makes no attempt to detect or report these problem, just as
it makes no attempt to do anything about backups.  However, since it is
more reliable to shred devices than files, `shred' by default does not
truncate or remove the output file.  This default is more suitable for
devices, which typically cannot be truncated and should not be removed.

     shred [OPTION]... FILE[...]

   The program accepts the following options.  Also see *note Common
options::.

`-f'
`--force'
     Override file permissions if necessary to allow overwriting.

`-NUMBER'
`-n NUMBER'
`--iterations=NUMBER'
     By default, `shred' uses 25 passes of overwrite.  This is enough
     for all of the useful overwrite patterns to be used at least once.
     You can reduce this to save time, or increase it if you have a lot
     of time to waste.

`-s BYTES'
`--size=BYTES'
     Shred the first BYTES bytes of the file. The default is to shred
     the whole file.  BYTES can be followed by a size specification like
     `k', `M', or `G' to specify a multiple. *Note Block size::.

`-u'
`--remove'
     After shredding a file, truncate it (if possible) and then remove
     it.  If a file has multiple links, only the named links will be
     removed.

`-v'
`--verbose'
     Display status updates as sterilization proceeds.

`-x'
`--exact'
     Normally, shred rounds the file size up to the next multiple of
     the filesystem block size to fully erase the last block of the
     file.  This option suppresses that behavior.  Thus, by default if
     you shred a 10-byte file on a system with 512-byte blocks, the
     resulting file will be 512 bytes long.  With this option, shred
     does not increase the size of the file.

`-z'
`--zero'
     Normally, the last pass that `shred' writes is made up of random
     data.  If this would be conspicuous on your hard drive (for
     example, because it looks like encrypted data), or you just think
     it's tidier, the `--zero' option adds an additional overwrite pass
     with all zero bits.  This is in addition to the number of passes
     specified by the `--iterations' option.

`-'
     Shred standard output.

     This argument is considered an option.  If the common `--' option
     has been used to indicate the end of options on the command line,
     then `-' will be interpreted as an ordinary file name.

     The intended use of this is to shred a removed temporary file.
     For example

          i=`tempfile -m 0600`
          exec 3<>"$i"
          rm -- "$i"
          echo "Hello, world" >&3
          shred - >&3
          exec 3>-

     Note that the shell command `shred - >file' does not shred the
     contents of FILE, since it truncates FILE before invoking `shred'.
     Use the command `shred file' or (if using a Bourne-compatible
     shell) the command `shred - 1<>file' instead.


   You might use the following command to erase all trace of the file
system you'd created on the floppy disk in your first drive.  That
command takes about 20 minutes to erase a 1.44MB floppy.

     shred --verbose /dev/fd0

   Similarly, to erase all data on a selected partition of your hard
disk, you could give a command like this:

     shred --verbose /dev/sda5


File: fileutils.info,  Node: Special file types,  Next: Changing file attributes,  Prev: Basic operations,  Up: Top

7 Special file types
********************

This chapter describes commands which create special types of files (and
`rmdir', which removes directories, one special file type).

   Although Unix-like operating systems have markedly fewer special file
types than others, not _everything_ can be treated only as the
undifferentiated byte stream of "normal files".  For example, when a
file is created or removed, the system must record this information,
which it does in a "directory"--a special type of file.  Although you
can read directories as normal files, if you're curious, in order for
the system to do its job it must impose a structure, a certain order,
on the bytes of the file.  Thus it is a "special" type of file.

   Besides directories, other special file types include named pipes
(FIFOs), symbolic links, sockets, and so-called "special files".

* Menu:

* ln invocation::               Make links between files.
* mkdir invocation::            Make directories.
* mkfifo invocation::           Make FIFOs (named pipes).
* mknod invocation::            Make block or character special files.
* rmdir invocation::            Remove empty directories.


File: fileutils.info,  Node: ln invocation,  Next: mkdir invocation,  Up: Special file types

7.1 `ln': Make links between files
==================================

`ln' makes links between files.  By default, it makes hard links; with
the `-s' option, it makes symbolic (or "soft") links.  Synopses:

     ln [OPTION]... TARGET [LINKNAME]
     ln [OPTION]... TARGET... DIRECTORY

   * If the last argument names an existing directory, `ln' creates a
     link to each TARGET file in that directory, using the TARGETs'
     names.  (But see the description of the `--no-dereference' option
     below.)

   * If two filenames are given, `ln' creates a link from the second to
     the first.

   * If one TARGET is given, `ln' creates a link to that file in the
     current directory.

   * It is an error if the last argument is not a directory and more
     than two files are given.  Without `-f' or `-i' (see below), `ln'
     will not remove an existing file.  Use the `--backup' option to
     make `ln' rename existing files.


   A "hard link" is another name for an existing file; the link and the
original are indistinguishable.  Technically speaking, they share the
same inode, and the inode contains all the information about a
file--indeed, it is not incorrect to say that the inode _is_ the file.
On all existing implementations, you cannot make a hard link to a
directory, and hard links cannot cross filesystem boundaries.  (These
restrictions are not mandated by POSIX, however.)

   "Symbolic links" ("symlinks" for short), on the other hand, are a
special file type (which not all kernels support: System V release 3
(and older) systems lack symlinks) in which the link file actually
refers to a different file, by name.  When most operations (opening,
reading, writing, and so on) are passed the symbolic link file, the
kernel automatically "dereferences" the link and operates on the target
of the link.  But some operations (e.g., removing) work on the link
file itself, rather than on its target.  *Note Symbolic Links:
(library)Symbolic Links.

   The program accepts the following options.  Also see *note Common
options::.

`-b'
`--backup[=METHOD]'
     *Note Backup options::.  Make a backup of each file that would
     otherwise be overwritten or removed.

`-d'
`-F'
`--directory'
     Allow the super-user to make hard links to directories.

`-f'
`--force'
     Remove existing destination files.

`-i'
`--interactive'
     Prompt whether to remove existing destination files.

`-n'
`--no-dereference'
     When given an explicit destination that is a symlink to a
     directory, treat that destination as if it were a normal file.

     When the destination is an actual directory (not a symlink to one),
     there is no ambiguity.  The link is created in that directory.
     But when the specified destination is a symlink to a directory,
     there are two ways to treat the user's request.  `ln' can treat
     the destination just as it would a normal directory and create the
     link in it.  On the other hand, the destination can be viewed as a
     non-directory--as the symlink itself.  In that case, `ln' must
     delete or backup that symlink before creating the new link.  The
     default is to treat a destination that is a symlink to a directory
     just like a directory.

`-s'
`--symbolic'
     Make symbolic links instead of hard links.  This option merely
     produces an error message on systems that do not support symbolic
     links.

`-S SUFFIX'
`--suffix=SUFFIX'
     Append SUFFIX to each backup file made with `-b'.  *Note Backup
     options::.

`--target-directory=DIRECTORY'
     Specify the destination DIRECTORY.  *Note Target directory::.

`-v'
`--verbose'
     Print the name of each file before linking it.

`-V METHOD'
`--version-control=METHOD'
     Change the type of backups made with `-b'.  The METHOD argument
     can be `none' (or `off'), `numbered' (or `t'), `existing' (or
     `nil'), or `never' (or `simple').  *Note Backup options::.


   Examples:

     ln -s /some/name  # creates link ./name pointing to /some/name
     ln -s /some/name myname  # creates link ./myname pointing to /some/name
     ln -s a b ..      # creates links ../a and ../b pointing to ./a and ./b


File: fileutils.info,  Node: mkdir invocation,  Next: mkfifo invocation,  Prev: ln invocation,  Up: Special file types

7.2 `mkdir': Make directories
=============================

`mkdir' creates directories with the specified names.  Synopsis:

     mkdir [OPTION]... NAME...

   If a NAME is an existing file but not a directory, `mkdir' prints a
warning message on stderr and will exit with a status of 1 after
processing any remaining NAMEs.  The same is done when a NAME is an
existing directory and the -p option is not given.  If a NAME is an
existing directory and the -p option is given, `mkdir' will ignore it.
That is, `mkdir' will not print a warning, raise an error, or change
the mode of the directory (even if the -m option is given), and will
move on to processing any remaining NAMEs.

   The program accepts the following options.  Also see *note Common
options::.

`-m MODE'
`--mode=MODE'
     Set the mode of created directories to MODE, which is symbolic as
     in `chmod' and uses `a=rwx' (read, write and execute allowed for
     everyone) minus the bits set in the umask for the point of the
     departure.  *Note File permissions::.

`-p'
`--parents'
     Make any missing parent directories for each argument.  The mode
     for parent directories is set to the umask modified by `u+wx'.
     Ignore arguments corresponding to existing directories.

`-v'

`--verbose'
     Print a message for each created directory.  This is most useful
     with `--parents'.


File: fileutils.info,  Node: mkfifo invocation,  Next: mknod invocation,  Prev: mkdir invocation,  Up: Special file types

7.3 `mkfifo': Make FIFOs (named pipes)
======================================

`mkfifo' creates FIFOs (also called "named pipes") with the specified
names.  Synopsis:

     mkfifo [OPTION] NAME...

   A "FIFO" is a special file type that permits independent processes
to communicate.  One process opens the FIFO file for writing, and
another for reading, after which data can flow as with the usual
anonymous pipe in shells or elsewhere.

   The program accepts the following option.  Also see *note Common
options::.

`-m MODE'
`--mode=MODE'
     Set the mode of created FIFOs to MODE, which is symbolic as in
     `chmod' and uses `a=rw' (read and write allowed for everyone) minus
     the bits set in the umask for the point of departure.  *Note File
     permissions::.



File: fileutils.info,  Node: mknod invocation,  Next: rmdir invocation,  Prev: mkfifo invocation,  Up: Special file types

7.4 `mknod': Make block or character special files
==================================================

`mknod' creates a FIFO, character special file, or block special file
with the specified name.  Synopsis:

     mknod [OPTION]... NAME TYPE [MAJOR MINOR]

   Unlike the phrase "special file type" above, the term "special file"
has a technical meaning on Unix: something that can generate or receive
data.  Usually this corresponds to a physical piece of hardware, e.g.,
a printer or a disk.  (These files are typically created at
system-configuration time.)  The `mknod' command is what creates files
of this type.  Such devices can be read either a character at a time or
a "block" (many characters) at a time, hence we say there are "block
special" files and "character special" files.

   The arguments after NAME specify the type of file to make:

`p'
     for a FIFO

`b'
     for a block special file

`c'
     for a character special file


   When making a block or character special file, the major and minor
device numbers must be given after the file type.

   The program accepts the following option.  Also see *note Common
options::.

`-m MODE'
`--mode=MODE'
     Set the mode of created files to MODE, which is symbolic as in
     `chmod' and uses `a=rw' minus the bits set in the umask as the
     point of departure.  *Note File permissions::.



File: fileutils.info,  Node: rmdir invocation,  Prev: mknod invocation,  Up: Special file types

7.5 `rmdir': Remove empty directories
=====================================

`rmdir' removes empty directories.  Synopsis:

     rmdir [OPTION]... DIRECTORY...

   If any DIRECTORY argument does not refer to an existing empty
directory, it is an error.

   The program accepts the following option.  Also see *note Common
options::.

`--ignore-fail-on-non-empty'
     Ignore each failure to remove a directory that is solely because
     the directory is non-empty.

`-p'
`--parents'
     Remove DIRECTORY, then try to remove each component of DIRECTORY.
     So, for example, `rmdir -p a/b/c' is similar to `rmdir a/b/c a/b
     a'.  As such, it fails if any of those directories turns out not
     to be empty.  Use the `--ignore-fail-on-non-empty' option to make
     it so such a failure does not evoke a diagnostic and does not
     cause `rmdir' to exit unsuccessfully.

`-v'

`--verbose'
     Give a diagnostic for each successful removal.  DIRECTORY is
     removed.


   *Note rm invocation::, for how to remove non-empty directories
(recursively).


File: fileutils.info,  Node: Changing file attributes,  Next: Disk usage,  Prev: Special file types,  Up: Top

8 Changing file attributes
**************************

A file is not merely its contents, a name, and a file type (*note
Special file types::).  A file also has an owner (a userid), a group (a
group id), permissions (what the owner can do with the file, what
people in the group can do, and what everyone else can do), various
timestamps, and other information.  Collectively, we call these a file's
"attributes".

   These commands change file attributes.

* Menu:

* chown invocation::            Change file owners and groups.
* chgrp invocation::            Change file groups.
* chmod invocation::            Change access permissions.
* touch invocation::            Change file timestamps.


File: fileutils.info,  Node: chown invocation,  Next: chgrp invocation,  Up: Changing file attributes

8.1 `chown': Change file owner and group
========================================

`chown' changes the user and/or group ownership of each given FILE to
NEW-OWNER or to the user and group of an existing reference file.
Synopsis:

     chown [OPTION]... {NEW-OWNER | --reference=REF_FILE} FILE...

   If used, NEW-OWNER specifies the new owner and/or group as follows
(with no embedded white space):

     [OWNER] [ [:] [GROUP] ]

   Specifically:

OWNER
     If only an OWNER (a user name or numeric user id) is given, that
     user is made the owner of each given file, and the files' group is
     not changed.

OWNER`:'GROUP
     If the OWNER is followed by a colon and a GROUP (a group name or
     numeric group id), with no spaces between them, the group
     ownership of the files is changed as well (to GROUP).

OWNER`:'
     If a colon but no group name follows OWNER, that user is made the
     owner of the files and the group of the files is changed to
     OWNER's login group.

`:'GROUP
     If the colon and following GROUP are given, but the owner is
     omitted, only the group of the files is changed; in this case,
     `chown' performs the same function as `chgrp'.


   You may use `.' in place of the `:' separator.  This is a GNU
extension for compatibility with older scripts.  New scripts should
avoid the use of `.' because GNU `chown' may fail if OWNER contains `.'
characters.

   The program accepts the following options.  Also see *note Common
options::.

`-c'
`--changes'
     Verbosely describe the action for each FILE whose ownership
     actually changes.

`-f'
`--silent'
`--quiet'
     Do not print error messages about files whose ownership cannot be
     changed.

`--from=OLD-OWNER'
     Change a FILE's ownership only if it has current attributes
     specified by OLD-OWNER.  OLD-OWNER has the same form as NEW-OWNER
     described above.  This option is useful primarily from a security
     standpoint in that it narrows considerably the window of potential
     abuse.  For example, to reflect a UID numbering change for one
     user's files without an option like this, `root' might run

          find / -owner OLDUSER -print0 | xargs -0 chown NEWUSER

     But that is dangerous because the interval between when the `find'
     tests the existing file's owner and when the `chown' is actually
     run may be quite large.  One way to narrow the gap would be to
     invoke chown for each file as it is found:

          find / -owner OLDUSER -exec chown NEWUSER {} \;

     But that is very slow if there are many affected files.  With this
     option, it is safer (the gap is narrower still) though still not
     perfect:

          chown -R --from=OLDUSER NEWUSER /

`--dereference'
     Do not act on symbolic links themselves but rather on what they
     point to.

`-h'
`--no-dereference'
     Act on symbolic links themselves instead of what they point to.
     This is the default.  This mode relies on the `lchown' system call.
     On systems that do not provide the `lchown' system call, `chown'
     fails when a file specified on the command line is a symbolic link.
     By default, no diagnostic is issued for symbolic links encountered
     during a recursive traversal, but see `--verbose'.

`--reference=REF_FILE'
     Change the user and group of each FILE to be the same as those of
     REF_FILE.  If REF_FILE is a symbolic link, do not use the user and
     group of the symbolic link, but rather those of the file it refers
     to.

`-v'
`--verbose'
     Output a diagnostic for every file processed.  If a symbolic link
     is encountered during a recursive traversal on a system without
     the `lchown' system call, and `--no-dereference' is in effect,
     then issue a diagnostic saying neither the symbolic link nor its
     referent is being changed.

`-R'
`--recursive'
     Recursively change ownership of directories and their contents.



File: fileutils.info,  Node: chgrp invocation,  Next: chmod invocation,  Prev: chown invocation,  Up: Changing file attributes

8.2 `chgrp': Change group ownership
===================================

`chgrp' changes the group ownership of each given FILE to GROUP (which
can be either a group name or a numeric group id) or to the group of an
existing reference file.  Synopsis:

     chgrp [OPTION]... {GROUP | --reference=REF_FILE} FILE...

   The program accepts the following options.  Also see *note Common
options::.

`-c'
`--changes'
     Verbosely describe the action for each FILE whose group actually
     changes.

`-f'
`--silent'
`--quiet'
     Do not print error messages about files whose group cannot be
     changed.

`--dereference'
     Do not act on symbolic links themselves but rather on what they
     point to.

`-h'
`--no-dereference'
     Act on symbolic links themselves instead of what they point to.
     This is the default.  This mode relies on the `lchown' system call.
     On systems that do not provide the `lchown' system call, `chgrp'
     fails when a file specified on the command line is a symbolic link.
     By default, no diagnostic is issued for symbolic links encountered
     during a recursive traversal, but see `--verbose'.

`--reference=REF_FILE'
     Change the group of each FILE to be the same as that of REF_FILE.
     If REF_FILE is a symbolic link, do not use the group of the
     symbolic link, but rather that of the file it refers to.

`-v'
`--verbose'
     Output a diagnostic for every file processed.  If a symbolic link
     is encountered during a recursive traversal on a system without
     the `lchown' system call, and `--no-dereference' is in effect,
     then issue a diagnostic saying neither the symbolic link nor its
     referent is being changed.

`-R'
`--recursive'
     Recursively change the group ownership of directories and their
     contents.



File: fileutils.info,  Node: chmod invocation,  Next: touch invocation,  Prev: chgrp invocation,  Up: Changing file attributes

8.3 `chmod': Change access permissions
======================================

`chmod' changes the access permissions of the named files.  Synopsis:

     chmod [OPTION]... {MODE | --reference=REF_FILE} FILE...

   `chmod' never changes the permissions of symbolic links, since the
`chmod' system call cannot change their permissions.  This is not a
problem since the permissions of symbolic links are never used.
However, for each symbolic link listed on the command line, `chmod'
changes the permissions of the pointed-to file.  In contrast, `chmod'
ignores symbolic links encountered during recursive directory
traversals.

   If used, MODE specifies the new permissions.  For details, see the
section on *note File permissions::.

   The program accepts the following options.  Also see *note Common
options::.

`-c'
`--changes'
     Verbosely describe the action for each FILE whose permissions
     actually changes.

`-f'
`--silent'
`--quiet'
     Do not print error messages about files whose permissions cannot be
     changed.

`-v'
`--verbose'
     Verbosely describe the action or non-action taken for every FILE.

`--reference=REF_FILE'
     Change the mode of each FILE to be the same as that of REF_FILE.
     *Note File permissions::.  If REF_FILE is a symbolic link, do not
     use the mode of the symbolic link, but rather that of the file it
     refers to.

`-R'
`--recursive'
     Recursively change permissions of directories and their contents.



File: fileutils.info,  Node: touch invocation,  Prev: chmod invocation,  Up: Changing file attributes

8.4 `touch': Change file timestamps
===================================

`touch' changes the access and/or modification times of the specified
files.  Synopsis:

     touch [OPTION]... FILE...

   If the first FILE would be a valid argument to the `-t' option and
no timestamp is given with any of the `-d', `-r', or `-t' options and
the `--' argument is not given, that argument is interpreted as the
time for the other files instead of as a file name.  Warning: this
usage is obsolescent, and future versions of POSIX will require that
support for it be withdrawn.  Use `-t' instead.

   Any FILE that does not exist is created empty.

   If changing both the access and modification times to the current
time, `touch' can change the timestamps for files that the user running
it does not own but has write permission for.  Otherwise, the user must
own the files.

   Although `touch' provides options for changing two of the times -
the times of last access and modification - of a file, there is actually
a third one as well: the inode change time.  This is often referred to
as a file's `ctime'.  The inode change time represents the time when
the file's meta-information last changed. One common example of this is
when the permissions of a file change.  Changing the permissions
doesn't access the file, so the atime doesn't change, nor does it
modify the file, so the mtime doesn't change.  Yet, something about the
file itself has changed, and this must be noted somewhere.  This is the
job of the ctime field.  This is necessary, so that, for example, a
backup program can make a fresh copy of the file, including the new
permissions value.  Another operation that modifies a file's ctime
without affecting the others is renaming.  In any case, it is not
possible, in normal operations, for a user to change the ctime field to
a user-specified value.

   The program accepts the following options.  Also see *note Common
options::.

`-a'
`--time=atime'
`--time=access'
`--time=use'
     Change the access time only.

`-c'
`--no-create'
     Do not create files that do not exist.

`-d'
`--date=time'
     Use TIME instead of the current time.  It can contain month names,
     timezones, `am' and `pm', etc.  *Note Date input formats::.

`-f'
     Ignored; for compatibility with BSD versions of `touch'.

`-m'
`--time=mtime'
`--time=modify'
     Change the modification time only.

`-r FILE'
`--reference=FILE'
     Use the times of the reference FILE instead of the current time.

`-t [[CC]YY]MMDDhhmm[.ss]'
     Use the argument (optional four-digit or two-digit years, months,
     days, hours, minutes, optional seconds) instead of the current
     time.  If the year is specified with only two digits, then CC is
     20 for years in the range 0 ... 68, and 19 for years in 69 ... 99.
     If no digits of the year are specified, the argument is
     interpreted as a date in the current year.



File: fileutils.info,  Node: Disk usage,  Next: Index,  Prev: Changing file attributes,  Up: Top

9 Disk usage
************

No disk can hold an infinite amount of data.  These commands report on
how much disk storage is in use or available.  (This has nothing much to
do with how much _main memory_, i.e., RAM, a program is using when it
runs; for that, you want `ps' or `pstat' or `swap' or some such
command.)

* Menu:

* df invocation::               Report filesystem disk space usage.
* du invocation::               Estimate file space usage.
* sync invocation::             Synchronize memory and disk.


File: fileutils.info,  Node: df invocation,  Next: du invocation,  Up: Disk usage

9.1 `df': Report filesystem disk space usage
============================================

`df' reports the amount of disk space used and available on
filesystems.  Synopsis:

     df [OPTION]... [FILE]...

   With no arguments, `df' reports the space used and available on all
currently mounted filesystems (of all types).  Otherwise, `df' reports
on the filesystem containing each argument FILE.

   Normally the disk space is printed in units of 1024 bytes, but this
can be overridden (*note Block size::).

   If an argument FILE is a disk device file containing a mounted
filesystem, `df' shows the space available on that filesystem rather
than on the filesystem containing the device node (i.e., the root
filesystem).  GNU `df' does not attempt to determine the disk usage on
unmounted filesystems, because on most kinds of systems doing so
requires extremely nonportable intimate knowledge of filesystem
structures.

   The program accepts the following options.  Also see *note Common
options::.

`-a'
`--all'
     Include in the listing filesystems that have a size of 0 blocks,
     which are omitted by default.  Such filesystems are typically
     special-purpose pseudo-filesystems, such as automounter entries.
     Also, filesystems of type "ignore" or "auto", supported by some
     operating systems, are only included if this option is specified.

`-h'
`--human-readable'
     Append a size letter such as `M' for megabytes to each size.
     Powers of 1024 are used, not 1000; `M' stands for 1,048,576 bytes.
     Use the `-H' or `--si' option if you prefer powers of 1000.

`-H'
`--si'
     Append a size letter such as `M' for megabytes to each size.  (SI
     is the International System of Units, which defines these letters
     as prefixes.)  Powers of 1000 are used, not 1024; `M' stands for
     1,000,000 bytes.  Use the `-h' or `--human-readable' option if you
     prefer powers of 1024.

`-i'
`--inodes'
     List inode usage information instead of block usage.  An inode
     (short for index node) contains information about a file such as
     its owner, permissions, timestamps, and location on the disk.

`-k'
`--kilobytes'
     Print sizes in 1024-byte blocks, overriding the default block size
     (*note Block size::).

`-l'
`--local'
     Limit the listing to local filesystems.  By default, remote
     filesystems are also listed.

`-m'
`--megabytes'
     Print sizes in megabyte (that is, 1,048,576-byte) blocks.

`--no-sync'
     Do not invoke the `sync' system call before getting any usage data.
     This may make `df' run significantly faster on systems with many
     disks, but on some systems (notably SunOS) the results may be
     slightly out of date.  This is the default.

`-P'
`--portability'
     Use the POSIX output format.  This is like the default format
     except for the following:

       1. The information about each filesystem is always printed on
          exactly one line; a mount device is never put on a line by
          itself.  This means that if the mount device name is more
          than 20 characters long (e.g., for some network mounts), the
          columns are misaligned.

       2. Non-integer values are rounded up, instead of being rounded
          down or rounded to the nearest integer.

       3. The labels in the header output line are changed to conform
          to POSIX.

`--sync'
     Invoke the `sync' system call before getting any usage data.  On
     some systems (notably SunOS), doing this yields more up to date
     results, but in general this option makes `df' much slower,
     especially when there are many or very busy filesystems.

`-t FSTYPE'
`--type=FSTYPE'
     Limit the listing to filesystems of type FSTYPE.  Multiple
     filesystem types can be specified by giving multiple `-t' options.
     By default, nothing is omitted.

`-T'
`--print-type'
     Print each filesystem's type.  The types printed here are the same
     ones you can include or exclude with `-t' and `-x'.  The particular
     types printed are whatever is supported by the system.  Here are
     some of the common names (this list is certainly not exhaustive):

    `nfs'
          An NFS filesystem, i.e., one mounted over a network from
          another machine.  This is the one type name which seems to be
          used uniformly by all systems.

    `4.2, ufs, efs...'
          A filesystem on a locally-mounted hard disk.  (The system
          might even support more than one type here; Linux does.)

    `hsfs, cdfs'
          A filesystem on a CD-ROM drive.  HP-UX uses `cdfs', most other
          systems use `hsfs' (`hs' for "High Sierra").

    `pcfs'
          An MS-DOS filesystem, usually on a diskette.


`-x FSTYPE'
`--exclude-type=FSTYPE'
     Limit the listing to filesystems not of type FSTYPE.  Multiple
     filesystem types can be eliminated by giving multiple `-x'
     options.  By default, no filesystem types are omitted.

`-v'
     Ignored; for compatibility with System V versions of `df'.



File: fileutils.info,  Node: du invocation,  Next: sync invocation,  Prev: df invocation,  Up: Disk usage

9.2 `du': Estimate file space usage
===================================

`du' reports the amount of disk space used by the specified files and
for each subdirectory (of directory arguments).  Synopsis:

     du [OPTION]... [FILE]...

   With no arguments, `du' reports the disk space for the current
directory.  Normally the disk space is printed in units of 1024 bytes,
but this can be overridden (*note Block size::).

   The program accepts the following options.  Also see *note Common
options::.

`-a'
`--all'
     Show counts for all files, not just directories.

`-b'
`--bytes'
     Print sizes in bytes, overriding the default block size (*note
     Block size::).

`-c'
`--total'
     Print a grand total of all arguments after all arguments have been
     processed.  This can be used to find out the total disk usage of a
     given set of files or directories.

`-D'
`--dereference-args'
     Dereference symbolic links that are command line arguments.  Does
     not affect other symbolic links.  This is helpful for finding out
     the disk usage of directories, such as `/usr/tmp', which are often
     symbolic links.

`-h'
`--human-readable'
     Append a size letter such as `M' for megabytes to each size.
     Powers of 1024 are used, not 1000; `M' stands for 1,048,576 bytes.
     Use the `-H' or `--si' option if you prefer powers of 1000.

`-H'
`--si'
     Append a size letter such as `M' for megabytes to each size.  (SI
     is the International System of Units, which defines these letters
     as prefixes.)  Powers of 1000 are used, not 1024; `M' stands for
     1,000,000 bytes.  Use the `-h' or `--human-readable' option if you
     prefer powers of 1024.

`-k'
`--kilobytes'
     Print sizes in 1024-byte blocks, overriding the default block size
     (*note Block size::).

`-l'
`--count-links'
     Count the size of all files, even if they have appeared already
     (as a hard link).

`-L'
`--dereference'
     Dereference symbolic links (show the disk space used by the file
     or directory that the link points to instead of the space used by
     the link).

`--max-depth=DEPTH'
     Show the total for each directory (and file if -all) that is at
     most MAX_DEPTH levels down from the root of the hierarchy.  The
     root is at level 0, so `du --max-depth=0' is equivalent to `du -s'.

`-m'
`--megabytes'
     Print sizes in megabyte (that is, 1,048,576-byte) blocks.

`-s'
`--summarize'
     Display only a total for each argument.

`-S'
`--separate-dirs'
     Report the size of each directory separately, not including the
     sizes of subdirectories.

`-x'
`--one-file-system'
     Skip directories that are on different filesystems from the one
     that the argument being processed is on.

`--exclude=PAT'
     When recursing, skip subdirectories or files matching PAT.  For
     example, `du --exclude='*.o'' excludes files whose names end in
     `.o'.

`-X FILE'
`--exclude-from=FILE'
     Like `--exclude', except take the patterns to exclude from FILE,
     one per line.  If FILE is `-', take the patterns from standard
     input.


   On BSD systems, `du' reports sizes that are half the correct values
for files that are NFS-mounted from HP-UX systems.  On HP-UX systems,
it reports sizes that are twice the correct values for files that are
NFS-mounted from BSD systems.  This is due to a flaw in HP-UX; it also
affects the HP-UX `du' program.


File: fileutils.info,  Node: sync invocation,  Prev: du invocation,  Up: Disk usage

9.3 `sync': Synchronize data on disk with memory
================================================

`sync' writes any data buffered in memory out to disk.  This can
include (but is not limited to) modified superblocks, modified inodes,
and delayed reads and writes.  This must be implemented by the kernel;
The `sync' program does nothing but exercise the `sync' system call.

   The kernel keeps data in memory to avoid doing (relatively slow) disk
reads and writes.  This improves performance, but if the computer
crashes, data may be lost or the filesystem corrupted as a result.
`sync' ensures everything in memory is written to disk.

   Any arguments are ignored, except for a lone `--help' or `--version'
(*note Common options::).


File: fileutils.info,  Node: Index,  Prev: Disk usage,  Up: Top

Index
*****

 [index ]
* Menu:

* -:                                     shred invocation.    (line 129)
* - and Unix rm:                         rm invocation.       (line  62)
* -, removing files beginning with:      rm invocation.       (line  50)
* --all <1>:                             du invocation.       (line  20)
* --all <2>:                             Which files are listed.
                                                              (line  12)
* --all:                                 df invocation.       (line  31)
* --almost-all:                          Which files are listed.
                                                              (line  16)
* --archive:                             cp invocation.       (line  46)
* --backup <1>:                          mv invocation.       (line  46)
* --backup <2>:                          ln invocation.       (line  52)
* --backup <3>:                          cp invocation.       (line  53)
* --backup <4>:                          Backup options.      (line  13)
* --backup:                              install invocation.  (line  28)
* --block-size=SIZE:                     Block size.          (line  15)
* --bourne-shell:                        dircolors invocation.
                                                              (line  27)
* --bytes:                               du invocation.       (line  24)
* --c-shell:                             dircolors invocation.
                                                              (line  33)
* --changes <1>:                         chown invocation.    (line  50)
* --changes <2>:                         chmod invocation.    (line  26)
* --changes:                             chgrp invocation.    (line  17)
* --classify:                            General output formatting.
                                                              (line  36)
* --color:                               General output formatting.
                                                              (line  21)
* --count-links:                         du invocation.       (line  61)
* --csh:                                 dircolors invocation.
                                                              (line  33)
* --date:                                touch invocation.    (line  56)
* --dereference <1>:                     cp invocation.       (line 100)
* --dereference <2>:                     Which files are listed.
                                                              (line  44)
* --dereference <3>:                     chgrp invocation.    (line  27)
* --dereference <4>:                     du invocation.       (line  66)
* --dereference:                         chown invocation.    (line  83)
* --dereference-args:                    du invocation.       (line  35)
* --directory <1>:                       Which files are listed.
                                                              (line  25)
* --directory <2>:                       rm invocation.       (line  21)
* --directory <3>:                       install invocation.  (line  36)
* --directory:                           ln invocation.       (line  58)
* --dired:                               What information is listed.
                                                              (line  11)
* --escape:                              Formatting the file names.
                                                              (line  11)
* --exact:                               shred invocation.    (line 112)
* --exclude-from=FILE:                   du invocation.       (line 100)
* --exclude-type:                        df invocation.       (line 132)
* --exclude=PAT:                         du invocation.       (line  94)
* --file-type:                           General output formatting.
                                                              (line  89)
* --force <1>:                           mv invocation.       (line  51)
* --force <2>:                           cp invocation.       (line  75)
* --force <3>:                           rm invocation.       (line  31)
* --force <4>:                           shred invocation.    (line  84)
* --force:                               ln invocation.       (line  62)
* --format <1>:                          General output formatting.
                                                              (line  95)
* --format <2>:                          What information is listed.
                                                              (line  64)
* --format:                              General output formatting.
                                                              (line  10)
* --from:                                chown invocation.    (line  60)
* --full-time:                           General output formatting.
                                                              (line  42)
* --group:                               install invocation.  (line  45)
* --help:                                Common options.      (line  11)
* --hide-control-chars:                  Formatting the file names.
                                                              (line  20)
* --human-readable <1>:                  Block size.          (line  87)
* --human-readable <2>:                  du invocation.       (line  42)
* --human-readable <3>:                  What information is listed.
                                                              (line  39)
* --human-readable:                      df invocation.       (line  39)
* --ignore-backups:                      Which files are listed.
                                                              (line  20)
* --ignore-fail-on-non-empty:            rmdir invocation.    (line  17)
* --ignore=PATTERN:                      Which files are listed.
                                                              (line  30)
* --indicator-style:                     General output formatting.
                                                              (line  36)
* --inode:                               What information is listed.
                                                              (line  56)
* --inodes:                              df invocation.       (line  53)
* --interactive <1>:                     mv invocation.       (line  56)
* --interactive <2>:                     rm invocation.       (line  36)
* --interactive <3>:                     ln invocation.       (line  66)
* --interactive:                         cp invocation.       (line  92)
* --iterations=NUMBER:                   shred invocation.    (line  89)
* --kilobytes <1>:                       df invocation.       (line  59)
* --kilobytes <2>:                       Block size.          (line  87)
* --kilobytes <3>:                       du invocation.       (line  56)
* --kilobytes:                           General output formatting.
                                                              (line  74)
* --link:                                cp invocation.       (line  96)
* --literal:                             Formatting the file names.
                                                              (line  16)
* --local:                               df invocation.       (line  64)
* --max-depth=DEPTH:                     du invocation.       (line  71)
* --megabytes <1>:                       du invocation.       (line  77)
* --megabytes:                           df invocation.       (line  69)
* --mode <1>:                            install invocation.  (line  51)
* --mode <2>:                            mkdir invocation.    (line  24)
* --mode <3>:                            mkfifo invocation.   (line  21)
* --mode:                                mknod invocation.    (line  40)
* --no-create:                           touch invocation.    (line  52)
* --no-dereference <1>:                  cp invocation.       (line  69)
* --no-dereference <2>:                  chown invocation.    (line  88)
* --no-dereference <3>:                  chgrp invocation.    (line  32)
* --no-dereference:                      ln invocation.       (line  70)
* --no-group:                            What information is listed.
                                                              (line  33)
* --no-sync:                             df invocation.       (line  72)
* --numeric-uid-gid:                     General output formatting.
                                                              (line  84)
* --one-file-system <1>:                 cp invocation.       (line 206)
* --one-file-system:                     du invocation.       (line  90)
* --owner:                               install invocation.  (line  60)
* --parents <1>:                         mkdir invocation.    (line  31)
* --parents <2>:                         cp invocation.       (line 111)
* --parents:                             rmdir invocation.    (line  22)
* --portability:                         df invocation.       (line  79)
* --preserve:                            cp invocation.       (line 104)
* --preserve-timestamps:                 install invocation.  (line  66)
* --print-database:                      dircolors invocation.
                                                              (line  38)
* --print-type:                          df invocation.       (line 108)
* --quiet <1>:                           chmod invocation.    (line  32)
* --quiet <2>:                           chgrp invocation.    (line  23)
* --quiet:                               chown invocation.    (line  56)
* --quote-name:                          Formatting the file names.
                                                              (line  27)
* --quoting-style:                       Formatting the file names.
                                                              (line  31)
* --recursive <1>:                       rm invocation.       (line  43)
* --recursive <2>:                       chgrp invocation.    (line  54)
* --recursive <3>:                       cp invocation.       (line 141)
* --recursive <4>:                       Which files are listed.
                                                              (line  50)
* --recursive <5>:                       chown invocation.    (line 111)
* --recursive:                           chmod invocation.    (line  47)
* --reference <1>:                       chgrp invocation.    (line  40)
* --reference <2>:                       chown invocation.    (line  96)
* --reference <3>:                       touch invocation.    (line  69)
* --reference:                           chmod invocation.    (line  40)
* --remove:                              shred invocation.    (line 102)
* --remove-destination:                  cp invocation.       (line 145)
* --reverse:                             Sorting the output.  (line  28)
* --separate-dirs:                       du invocation.       (line  85)
* --sh:                                  dircolors invocation.
                                                              (line  27)
* --show-control-chars:                  Formatting the file names.
                                                              (line  66)
* --si <1>:                              What information is listed.
                                                              (line  45)
* --si <2>:                              du invocation.       (line  48)
* --si <3>:                              Block size.          (line  87)
* --si:                                  df invocation.       (line  45)
* --silent <1>:                          chown invocation.    (line  56)
* --silent <2>:                          chmod invocation.    (line  32)
* --silent:                              chgrp invocation.    (line  23)
* --size:                                What information is listed.
                                                              (line 118)
* --size=BYTES:                          shred invocation.    (line  96)
* --sort:                                Sorting the output.  (line  63)
* --sparse=WHEN:                         cp invocation.       (line 149)
* --strip:                               install invocation.  (line  76)
* --strip-trailing-slashes <1>:          cp invocation.       (line 175)
* --strip-trailing-slashes:              mv invocation.       (line  70)
* --suffix <1>:                          ln invocation.       (line  92)
* --suffix <2>:                          Backup options.      (line  50)
* --suffix <3>:                          cp invocation.       (line 188)
* --suffix <4>:                          install invocation.  (line  80)
* --suffix:                              mv invocation.       (line  75)
* --summarize:                           du invocation.       (line  81)
* --symbolic:                            ln invocation.       (line  86)
* --symbolic-link:                       cp invocation.       (line 180)
* --sync:                                df invocation.       (line  95)
* --tabsize:                             General output formatting.
                                                              (line  99)
* --target-directory <1>:                cp invocation.       (line 192)
* --target-directory <2>:                mv invocation.       (line  79)
* --target-directory <3>:                install invocation.  (line  84)
* --target-directory <4>:                ln invocation.       (line  96)
* --target-directory:                    Target directory.    (line  10)
* --time <1>:                            Sorting the output.  (line  42)
* --time <2>:                            touch invocation.    (line  65)
* --time <3>:                            Sorting the output.  (line  14)
* --time:                                touch invocation.    (line  48)
* --total:                               du invocation.       (line  29)
* --type:                                df invocation.       (line 102)
* --update:                              mv invocation.       (line  62)
* --verbose <1>:                         chgrp invocation.    (line  46)
* --verbose <2>:                         chmod invocation.    (line  37)
* --verbose <3>:                         chown invocation.    (line 103)
* --verbose <4>:                         mkdir invocation.    (line  38)
* --verbose <5>:                         cp invocation.       (line 196)
* --verbose <6>:                         install invocation.  (line  88)
* --verbose <7>:                         mv invocation.       (line  67)
* --verbose <8>:                         rmdir invocation.    (line  32)
* --verbose <9>:                         shred invocation.    (line 108)
* --verbose <10>:                        ln invocation.       (line 100)
* --verbose:                             rm invocation.       (line  47)
* --version:                             Common options.      (line  15)
* --version-control <1>:                 Backup options.      (line  56)
* --version-control <2>:                 install invocation.  (line  92)
* --version-control <3>:                 mv invocation.       (line  83)
* --version-control <4>:                 cp invocation.       (line 200)
* --version-control:                     ln invocation.       (line 104)
* --width:                               General output formatting.
                                                              (line 105)
* --zero:                                shred invocation.    (line 121)
* -1:                                    General output formatting.
                                                              (line  10)
* -a:                                    touch invocation.    (line  48)
* -A:                                    Which files are listed.
                                                              (line  16)
* -a <1>:                                df invocation.       (line  31)
* -a <2>:                                cp invocation.       (line  46)
* -a <3>:                                Which files are listed.
                                                              (line  12)
* -a:                                    du invocation.       (line  20)
* -B:                                    Which files are listed.
                                                              (line  20)
* -b <1>:                                du invocation.       (line  24)
* -b <2>:                                install invocation.  (line  28)
* -b <3>:                                ln invocation.       (line  52)
* -b <4>:                                mv invocation.       (line  46)
* -b <5>:                                Formatting the file names.
                                                              (line  11)
* -b <6>:                                dircolors invocation.
                                                              (line  27)
* -b <7>:                                cp invocation.       (line  53)
* -b:                                    Backup options.      (line  13)
* -c <1>:                                chown invocation.    (line  50)
* -c:                                    touch invocation.    (line  52)
* -C:                                    General output formatting.
                                                              (line  15)
* -c <1>:                                du invocation.       (line  29)
* -c <2>:                                Sorting the output.  (line  14)
* -c <3>:                                install invocation.  (line  32)
* -c <4>:                                dircolors invocation.
                                                              (line  33)
* -c <5>:                                chmod invocation.    (line  26)
* -c:                                    chgrp invocation.    (line  17)
* -d <1>:                                cp invocation.       (line  69)
* -d:                                    install invocation.  (line  36)
* -D:                                    What information is listed.
                                                              (line  11)
* -d <1>:                                touch invocation.    (line  56)
* -d <2>:                                Which files are listed.
                                                              (line  25)
* -d:                                    ln invocation.       (line  58)
* -D:                                    du invocation.       (line  35)
* -d:                                    rm invocation.       (line  21)
* -F:                                    ln invocation.       (line  58)
* -f <1>:                                chmod invocation.    (line  32)
* -f <2>:                                ln invocation.       (line  62)
* -f <3>:                                rm invocation.       (line  31)
* -f <4>:                                cp invocation.       (line  75)
* -f <5>:                                chown invocation.    (line  56)
* -f <6>:                                touch invocation.    (line  60)
* -f <7>:                                chgrp invocation.    (line  23)
* -f <8>:                                shred invocation.    (line  84)
* -f:                                    mv invocation.       (line  51)
* -F:                                    General output formatting.
                                                              (line  36)
* -f:                                    Sorting the output.  (line  21)
* -g:                                    install invocation.  (line  45)
* -G:                                    What information is listed.
                                                              (line  33)
* -g (ignored):                          ls invocation.       (line  28)
* -h <1>:                                df invocation.       (line  39)
* -h <2>:                                Block size.          (line  87)
* -h:                                    What information is listed.
                                                              (line  39)
* -H <1>:                                cp invocation.       (line  85)
* -H:                                    df invocation.       (line  45)
* -h:                                    du invocation.       (line  42)
* -H <1>:                                What information is listed.
                                                              (line  45)
* -H:                                    du invocation.       (line  48)
* -h <1>:                                chown invocation.    (line  88)
* -h:                                    chgrp invocation.    (line  32)
* -I:                                    Which files are listed.
                                                              (line  30)
* -i <1>:                                ln invocation.       (line  66)
* -i <2>:                                cp invocation.       (line  92)
* -i <3>:                                What information is listed.
                                                              (line  56)
* -i <4>:                                rm invocation.       (line  36)
* -i <5>:                                mv invocation.       (line  56)
* -i:                                    df invocation.       (line  53)
* -k <1>:                                df invocation.       (line  59)
* -k <2>:                                Block size.          (line  87)
* -k <3>:                                du invocation.       (line  56)
* -k:                                    General output formatting.
                                                              (line  74)
* -L <1>:                                Which files are listed.
                                                              (line  44)
* -L:                                    cp invocation.       (line 100)
* -l:                                    du invocation.       (line  61)
* -L:                                    du invocation.       (line  66)
* -l <1>:                                df invocation.       (line  64)
* -l <2>:                                cp invocation.       (line  96)
* -l:                                    What information is listed.
                                                              (line  64)
* -m <1>:                                General output formatting.
                                                              (line  79)
* -m <2>:                                du invocation.       (line  77)
* -m <3>:                                mkfifo invocation.   (line  21)
* -m <4>:                                mkdir invocation.    (line  24)
* -m <5>:                                df invocation.       (line  69)
* -m <6>:                                mknod invocation.    (line  40)
* -m <7>:                                touch invocation.    (line  65)
* -m:                                    install invocation.  (line  51)
* -N:                                    Formatting the file names.
                                                              (line  16)
* -n <1>:                                General output formatting.
                                                              (line  84)
* -n:                                    ln invocation.       (line  70)
* -n NUMBER:                             shred invocation.    (line  89)
* -o <1>:                                install invocation.  (line  60)
* -o:                                    What information is listed.
                                                              (line 111)
* -p <1>:                                install invocation.  (line  66)
* -p <2>:                                dircolors invocation.
                                                              (line  38)
* -p <3>:                                cp invocation.       (line 104)
* -p:                                    mkdir invocation.    (line  31)
* -P:                                    cp invocation.       (line 111)
* -p:                                    rmdir invocation.    (line  22)
* -P:                                    df invocation.       (line  79)
* -Q:                                    Formatting the file names.
                                                              (line  27)
* -q:                                    Formatting the file names.
                                                              (line  20)
* -R <1>:                                chmod invocation.    (line  47)
* -R <2>:                                cp invocation.       (line 141)
* -R <3>:                                rm invocation.       (line  43)
* -R:                                    chown invocation.    (line 111)
* -r:                                    Sorting the output.  (line  28)
* -R:                                    Which files are listed.
                                                              (line  50)
* -r:                                    touch invocation.    (line  69)
* -R:                                    chgrp invocation.    (line  54)
* -r:                                    rm invocation.       (line  43)
* -s:                                    ln invocation.       (line  86)
* -S <1>:                                Backup options.      (line  50)
* -S <2>:                                Sorting the output.  (line  33)
* -S <3>:                                mv invocation.       (line  75)
* -S:                                    du invocation.       (line  85)
* -s <1>:                                cp invocation.       (line 180)
* -s:                                    install invocation.  (line  76)
* -S:                                    install invocation.  (line  80)
* -s <1>:                                du invocation.       (line  81)
* -s:                                    What information is listed.
                                                              (line 118)
* -S <1>:                                cp invocation.       (line 188)
* -S:                                    ln invocation.       (line  92)
* -s BYTES:                              shred invocation.    (line  96)
* -t:                                    df invocation.       (line 102)
* -T:                                    General output formatting.
                                                              (line  99)
* -t:                                    Sorting the output.  (line  37)
* -T:                                    df invocation.       (line 108)
* -u:                                    shred invocation.    (line 102)
* -U:                                    Sorting the output.  (line  49)
* -u <1>:                                mv invocation.       (line  62)
* -u:                                    Sorting the output.  (line  42)
* -v <1>:                                chown invocation.    (line 103)
* -v <2>:                                ln invocation.       (line 100)
* -v:                                    mv invocation.       (line  67)
* -V:                                    ln invocation.       (line 104)
* -v <1>:                                chgrp invocation.    (line  46)
* -v:                                    shred invocation.    (line 108)
* -V <1>:                                install invocation.  (line  92)
* -V:                                    mv invocation.       (line  83)
* -v <1>:                                mkdir invocation.    (line  38)
* -v <2>:                                rm invocation.       (line  47)
* -v:                                    chmod invocation.    (line  37)
* -V:                                    cp invocation.       (line 200)
* -v <1>:                                rmdir invocation.    (line  32)
* -v <2>:                                Sorting the output.  (line  56)
* -v <3>:                                cp invocation.       (line 196)
* -v:                                    install invocation.  (line  88)
* -w:                                    General output formatting.
                                                              (line 105)
* -X:                                    Sorting the output.  (line  63)
* -x <1>:                                shred invocation.    (line 112)
* -x <2>:                                cp invocation.       (line 206)
* -x <3>:                                du invocation.       (line  90)
* -x <4>:                                General output formatting.
                                                              (line  95)
* -x:                                    df invocation.       (line 132)
* -X FILE:                               du invocation.       (line 100)
* -z:                                    shred invocation.    (line 121)
* 4.2 filesystem type:                   df invocation.       (line 119)
* abbreviations for months:              Calendar date items. (line  38)
* access permissions, changing:          chmod invocation.    (line   6)
* access time, changing:                 touch invocation.    (line  48)
* access time, printing or sorting files by: Sorting the output.
                                                              (line  42)
* across, listing files:                 General output formatting.
                                                              (line  95)
* adding permissions:                    Setting Permissions. (line  38)
* ago in date strings:                   Relative items in date strings.
                                                              (line  23)
* alternate ebcdic, converting to:       dd invocation.       (line  77)
* always color option:                   General output formatting.
                                                              (line  27)
* am in date strings:                    Time of day items.   (line  20)
* appropriate privileges:                install invocation.  (line  60)
* ascii, converting to:                  dd invocation.       (line  71)
* atime, changing:                       touch invocation.    (line  48)
* atime, printing or sorting files by:   Sorting the output.  (line  42)
* attributes, file:                      Changing file attributes.
                                                              (line   6)
* authors of getdate:                    Authors of getdate.  (line   6)
* auto color option:                     General output formatting.
                                                              (line  25)
* automounter filesystems:               df invocation.       (line  31)
* b for block special file:              mknod invocation.    (line  26)
* backslash sequences for file names:    Formatting the file names.
                                                              (line  11)
* backup files, ignoring:                Which files are listed.
                                                              (line  20)
* backup options:                        Backup options.      (line   6)
* backup suffix:                         Backup options.      (line  50)
* backups, making <1>:                   ln invocation.       (line  52)
* backups, making <2>:                   cp invocation.       (line  53)
* backups, making <3>:                   mv invocation.       (line  46)
* backups, making <4>:                   Backup options.      (line  13)
* backups, making:                       install invocation.  (line  28)
* backups, making only:                  cp invocation.       (line  34)
* beginning of time, for POSIX:          Date input formats.  (line  37)
* Bellovin, Steven M.:                   Authors of getdate.  (line   6)
* Berets, Jim:                           Authors of getdate.  (line   6)
* Berry, K.:                             Authors of getdate.  (line  14)
* block (space-padding):                 dd invocation.       (line  80)
* block size <1>:                        dd invocation.       (line  48)
* block size:                            Block size.          (line   6)
* block size of conversion:              dd invocation.       (line  52)
* block size of input:                   dd invocation.       (line  42)
* block size of output:                  dd invocation.       (line  45)
* block special files:                   mknod invocation.    (line  11)
* block special files, creating:         mknod invocation.    (line   6)
* BLOCK_SIZE:                            Block size.          (line  15)
* Bourne shell syntax for color setup:   dircolors invocation.
                                                              (line  27)
* bs:                                    dd invocation.       (line  48)
* BSD touch compatibility:               touch invocation.    (line  60)
* bugs, reporting:                       Introduction.        (line  14)
* byte-swapping:                         dd invocation.       (line  95)
* c for character special file:          mknod invocation.    (line  29)
* C shell syntax for color setup:        dircolors invocation.
                                                              (line  33)
* calendar date item:                    Calendar date items. (line   6)
* case, ignored in dates:                General date syntax. (line  59)
* cbs:                                   dd invocation.       (line  52)
* CD-ROM filesystem type:                df invocation.       (line 123)
* cdfs filesystem type:                  df invocation.       (line 123)
* changed files, verbosely describing:   chgrp invocation.    (line  17)
* changed owners, verbosely describing:  chown invocation.    (line  50)
* changing access permissions:           chmod invocation.    (line   6)
* changing file attributes:              Changing file attributes.
                                                              (line   6)
* changing file ownership:               chown invocation.    (line   6)
* changing file timestamps:              touch invocation.    (line   6)
* changing group ownership <1>:          chown invocation.    (line   6)
* changing group ownership:              chgrp invocation.    (line   6)
* changing special permissions:          Changing Special Permissions.
                                                              (line   6)
* character special files:               mknod invocation.    (line  11)
* character special files, creating:     mknod invocation.    (line   6)
* chgrp:                                 chgrp invocation.    (line   6)
* chmod:                                 chmod invocation.    (line   6)
* chown:                                 chown invocation.    (line   6)
* color database, printing:              dircolors invocation.
                                                              (line  38)
* color setup:                           dircolors invocation.
                                                              (line   6)
* color, distinguishing file types with: General output formatting.
                                                              (line  21)
* COLUMNS:                               General output formatting.
                                                              (line 105)
* commas, outputting between files:      General output formatting.
                                                              (line  79)
* comments, in dates:                    General date syntax. (line  59)
* common options:                        Common options.      (line   6)
* conditional executability:             Conditional Executability.
                                                              (line   6)
* conv:                                  dd invocation.       (line  65)
* conversion block size:                 dd invocation.       (line  52)
* converting while copying a file:       dd invocation.       (line   6)
* copying directories recursively:       cp invocation.       (line 126)
* copying existing permissions:          Copying Permissions. (line   6)
* copying files and directories:         cp invocation.       (line   6)
* copying files and setting attributes:  install invocation.  (line   6)
* count:                                 dd invocation.       (line  61)
* cp:                                    cp invocation.       (line   6)
* crashes and corruption:                sync invocation.     (line  11)
* creating directories:                  mkdir invocation.    (line   6)
* creating FIFOs (named pipes):          mkfifo invocation.   (line   6)
* creating links (hard or soft):         ln invocation.       (line   6)
* csh syntax for color setup:            dircolors invocation.
                                                              (line  33)
* ctime, printing or sorting by:         Sorting the output.  (line  14)
* data, erasing:                         shred invocation.    (line   6)
* database for color setup, printing:    dircolors invocation.
                                                              (line  38)
* date format, ISO 8601:                 Calendar date items. (line  30)
* date input formats:                    Date input formats.  (line   6)
* day in date strings:                   Relative items in date strings.
                                                              (line  29)
* day of week item:                      Day of week items.   (line   6)
* dd:                                    dd invocation.       (line   6)
* dereferencing symbolic links:          ln invocation.       (line  37)
* destination directory <1>:             mv invocation.       (line  79)
* destination directory <2>:             Target directory.    (line  10)
* destination directory <3>:             cp invocation.       (line 192)
* destination directory <4>:             ln invocation.       (line  96)
* destination directory:                 install invocation.  (line  84)
* device file, disk:                     df invocation.       (line  18)
* df:                                    df invocation.       (line   6)
* DF_BLOCK_SIZE:                         Block size.          (line  15)
* dir:                                   dir invocation.      (line   6)
* dircolors:                             dircolors invocation.
                                                              (line   6)
* directories, copying:                  cp invocation.       (line   6)
* directories, copying recursively:      cp invocation.       (line 126)
* directories, creating:                 mkdir invocation.    (line   6)
* directories, creating with given attributes: install invocation.
                                                              (line  36)
* directories, removing (recursively):   rm invocation.       (line  43)
* directories, removing empty:           rmdir invocation.    (line   6)
* directories, removing with unlink:     rm invocation.       (line  21)
* directory deletion, ignoring failures: rmdir invocation.    (line  17)
* directory deletion, reporting:         rmdir invocation.    (line  32)
* directory listing:                     ls invocation.       (line   6)
* directory listing, brief:              dir invocation.      (line   6)
* directory listing, recursive:          Which files are listed.
                                                              (line  50)
* directory listing, verbose:            vdir invocation.     (line   6)
* directory order, listing by:           Sorting the output.  (line  21)
* dired Emacs mode support:              What information is listed.
                                                              (line  11)
* disk allocation:                       What information is listed.
                                                              (line 118)
* disk device file:                      df invocation.       (line  18)
* disk usage:                            Disk usage.          (line   6)
* disk usage by filesystem:              df invocation.       (line   6)
* disk usage for files:                  du invocation.       (line   6)
* diskette filesystem:                   df invocation.       (line 127)
* displacement of dates:                 Relative items in date strings.
                                                              (line   6)
* DOS filesystem:                        df invocation.       (line 127)
* du:                                    du invocation.       (line   6)
* DU_BLOCK_SIZE:                         Block size.          (line  15)
* ebcdic, converting to:                 dd invocation.       (line  74)
* efs filesystem type:                   df invocation.       (line 119)
* Eggert, Paul:                          Authors of getdate.  (line   6)
* empty files, creating:                 touch invocation.    (line  18)
* epoch, for POSIX:                      Date input formats.  (line  37)
* erasing data:                          shred invocation.    (line   6)
* error messages, omitting <1>:          chmod invocation.    (line  32)
* error messages, omitting <2>:          chown invocation.    (line  56)
* error messages, omitting:              chgrp invocation.    (line  23)
* excluding files from du:               du invocation.       (line  94)
* executables and file type, marking:    General output formatting.
                                                              (line  36)
* execute permission:                    Mode Structure.      (line  14)
* execute permission, symbolic:          Setting Permissions. (line  63)
* existing backup method:                Backup options.      (line  39)
* extension, sorting files by:           Sorting the output.  (line  63)
* FIFOs, creating:                       mkfifo invocation.   (line   6)
* file attributes, changing:             Changing file attributes.
                                                              (line   6)
* file information, preserving:          cp invocation.       (line 104)
* file ownership, changing:              chown invocation.    (line   6)
* file permissions:                      File permissions.    (line   6)
* file permissions, numeric:             Numeric Modes.       (line   6)
* file space usage:                      du invocation.       (line   6)
* file timestamps, changing:             touch invocation.    (line   6)
* file type and executables, marking:    General output formatting.
                                                              (line  36)
* file type, marking:                    General output formatting.
                                                              (line  89)
* file types:                            Special file types.  (line   9)
* file types, special:                   Special file types.  (line   6)
* file utilities:                        Top.                 (line   6)
* files beginning with -, removing:      rm invocation.       (line  50)
* files, copying:                        cp invocation.       (line   6)
* filesystem disk usage:                 df invocation.       (line   6)
* filesystem space, retrieving current data more slowly: df invocation.
                                                              (line  95)
* filesystem space, retrieving old data more quickly: df invocation.
                                                              (line  72)
* filesystem types, limiting output to certain: df invocation.
                                                              (line  64)
* filesystem types, printing:            df invocation.       (line 108)
* filesystems and hard links:            ln invocation.       (line   6)
* filesystems, omitting copying to different: cp invocation.  (line 206)
* first in date strings:                 General date syntax. (line  26)
* force deletion:                        shred invocation.    (line  84)
* fortnight in date strings:             Relative items in date strings.
                                                              (line  15)
* fsck:                                  rm invocation.       (line  21)
* general date syntax:                   General date syntax. (line   6)
* getdate:                               Date input formats.  (line   6)
* giving away permissions:               Umask and Protection.
                                                              (line  12)
* grand total of disk space:             du invocation.       (line  29)
* group owner, default:                  Mode Structure.      (line  27)
* group ownership of installed files, setting: install invocation.
                                                              (line  45)
* group ownership, changing <1>:         chgrp invocation.    (line   6)
* group ownership, changing:             chown invocation.    (line   6)
* group, permissions for:                Setting Permissions. (line  26)
* hard link, defined:                    ln invocation.       (line  29)
* hard links to directories:             ln invocation.       (line  58)
* hard links, counting in du:            du invocation.       (line  61)
* hard links, creating:                  ln invocation.       (line   6)
* hard links, preserving:                cp invocation.       (line  69)
* help, online:                          Common options.      (line  11)
* High Sierra filesystem:                df invocation.       (line 123)
* history:                               Introduction.        (line  21)
* holes, copying files with:             cp invocation.       (line 149)
* horizontal, listing files:             General output formatting.
                                                              (line  95)
* hour in date strings:                  Relative items in date strings.
                                                              (line  15)
* hsfs filesystem type:                  df invocation.       (line 123)
* human-readable output <1>:             What information is listed.
                                                              (line  39)
* human-readable output <2>:             df invocation.       (line  39)
* human-readable output <3>:             du invocation.       (line  42)
* human-readable output:                 Block size.          (line  37)
* ibs:                                   dd invocation.       (line  42)
* if:                                    dd invocation.       (line  34)
* ignore filesystems:                    df invocation.       (line  31)
* inode number, printing:                What information is listed.
                                                              (line  56)
* inode usage:                           df invocation.       (line  53)
* inode, and hard links:                 ln invocation.       (line  29)
* inodes, written buffered:              sync invocation.     (line   6)
* input block size:                      dd invocation.       (line  42)
* install:                               install invocation.  (line   6)
* introduction:                          Introduction.        (line   6)
* ISO 8601 date format:                  Calendar date items. (line  30)
* items in date strings:                 General date syntax. (line   6)
* iterations, selecting the number of:   shred invocation.    (line  89)
* kilobytes for filesystem sizes:        df invocation.       (line  59)
* language, in dates:                    General date syntax. (line  37)
* last DAY:                              Day of week items.   (line  15)
* last in date strings:                  General date syntax. (line  26)
* lcase, converting to:                  dd invocation.       (line  89)
* lchown <1>:                            chown invocation.    (line  83)
* lchown <2>:                            chgrp invocation.    (line  27)
* lchown:                                chown invocation.    (line  88)
* leading directories, creating missing: install invocation.  (line  36)
* limiting output of du:                 du invocation.       (line  71)
* links, creating:                       ln invocation.       (line   6)
* Linux filesystem types:                df invocation.       (line 119)
* ln:                                    ln invocation.       (line   6)
* local filesystem types:                df invocation.       (line 119)
* long ls format:                        What information is listed.
                                                              (line  64)
* ls:                                    ls invocation.       (line   6)
* LS_BLOCK_SIZE:                         Block size.          (line  15)
* LS_COLORS:                             dircolors invocation.
                                                              (line  16)
* MacKenzie, David:                      Authors of getdate.  (line   6)
* Makefiles, installing programs in:     install invocation.  (line  18)
* manipulating files:                    Basic operations.    (line   6)
* megabytes for filesystem sizes <1>:    df invocation.       (line  69)
* megabytes for filesystem sizes:        du invocation.       (line  77)
* Meyering, Jim:                         Authors of getdate.  (line   6)
* midnight in date strings:              Time of day items.   (line  20)
* minute in date strings:                Relative items in date strings.
                                                              (line  15)
* minutes, time zone correction by:      Time of day items.   (line  28)
* mkdir:                                 mkdir invocation.    (line   6)
* mkfifo:                                mkfifo invocation.   (line   6)
* mknod:                                 mknod invocation.    (line   6)
* modes and umask:                       Umask and Protection.
                                                              (line   6)
* modes of created directories, setting: mkdir invocation.    (line  24)
* modes of created FIFOs, setting:       mkfifo invocation.   (line  21)
* modification time, sorting files by:   Sorting the output.  (line  37)
* modify time, changing:                 touch invocation.    (line  65)
* month in date strings:                 Relative items in date strings.
                                                              (line  15)
* month names in date strings:           Calendar date items. (line  38)
* months, written-out:                   General date syntax. (line  33)
* MS-DOS filesystem:                     df invocation.       (line 127)
* mtime, changing:                       touch invocation.    (line  65)
* multiple changes to permissions:       Multiple Changes.    (line   6)
* multipliers after numbers:             dd invocation.       (line  15)
* mv:                                    mv invocation.       (line   6)
* named pipes, creating:                 mkfifo invocation.   (line   6)
* newer files, moving only:              mv invocation.       (line  62)
* next DAY:                              Day of week items.   (line  15)
* next in date strings:                  General date syntax. (line  26)
* NFS filesystem type:                   df invocation.       (line 114)
* NFS mounts from BSD to HP-UX <1>:      du invocation.       (line 105)
* NFS mounts from BSD to HP-UX:          What information is listed.
                                                              (line 126)
* noerror:                               dd invocation.       (line 100)
* non-directories, copying as special files: cp invocation.   (line 126)
* none backup method:                    Backup options.      (line  31)
* none color option:                     General output formatting.
                                                              (line  23)
* none, sorting option for ls:           Sorting the output.  (line  49)
* noon in date strings:                  Time of day items.   (line  20)
* notrunc:                               dd invocation.       (line 103)
* now in date strings:                   Relative items in date strings.
                                                              (line  33)
* numbered backup method:                Backup options.      (line  35)
* numbers, written-out:                  General date syntax. (line  26)
* numeric modes:                         Numeric Modes.       (line   6)
* numeric uid and gid:                   General output formatting.
                                                              (line  84)
* obs:                                   dd invocation.       (line  45)
* octal numbers for file modes:          Numeric Modes.       (line   6)
* of:                                    dd invocation.       (line  37)
* one filesystem, restricting du to:     du invocation.       (line  90)
* one-line output format:                df invocation.       (line  79)
* ordinal numbers:                       General date syntax. (line  26)
* other permissions:                     Setting Permissions. (line  29)
* output block size:                     dd invocation.       (line  45)
* output format, portable:               df invocation.       (line  79)
* owner of file, permissions for:        Setting Permissions. (line  23)
* owner, default:                        Mode Structure.      (line  27)
* ownership of installed files, setting: install invocation.  (line  60)
* p for FIFO file:                       mknod invocation.    (line  23)
* parent directories and cp:             cp invocation.       (line 111)
* parent directories, creating:          mkdir invocation.    (line  31)
* parent directories, creating missing:  install invocation.  (line  36)
* parent directories, removing:          rmdir invocation.    (line  22)
* PC filesystem:                         df invocation.       (line 127)
* pcfs:                                  df invocation.       (line 127)
* permissions of files:                  File permissions.    (line   6)
* permissions of installed files, setting: install invocation.
                                                              (line  51)
* permissions, changing access:          chmod invocation.    (line   6)
* permissions, copying existing:         Copying Permissions. (line   6)
* permissions, for changing file timestamps: touch invocation.
                                                              (line  20)
* permissions, output by ls:             What information is listed.
                                                              (line  81)
* Pinard, F.:                            Authors of getdate.  (line  14)
* pm in date strings:                    Time of day items.   (line  20)
* portable output format:                df invocation.       (line  79)
* POSIX output format:                   df invocation.       (line  79)
* POSIX.2:                               Introduction.        (line  11)
* POSIXLY_CORRECT, and block size:       Block size.          (line  15)
* printing color database:               dircolors invocation.
                                                              (line  38)
* prompting, and ln:                     ln invocation.       (line  66)
* prompting, and mv:                     mv invocation.       (line  30)
* prompting, and rm:                     rm invocation.       (line  11)
* prompts, forcing:                      mv invocation.       (line  56)
* prompts, omitting:                     mv invocation.       (line  51)
* pure numbers in date strings:          Pure numbers in date strings.
                                                              (line   6)
* quoting style:                         Formatting the file names.
                                                              (line  31)
* read errors, ignoring:                 dd invocation.       (line 100)
* read permission:                       Mode Structure.      (line   8)
* read permission, symbolic:             Setting Permissions. (line  57)
* read system call, and holes:           cp invocation.       (line 149)
* recursive directory listing:           Which files are listed.
                                                              (line  50)
* recursively changing access permissions: chmod invocation.  (line  47)
* recursively changing file ownership:   chown invocation.    (line 111)
* recursively changing group ownership:  chgrp invocation.    (line  54)
* recursively copying directories:       cp invocation.       (line 126)
* relative items in date strings:        Relative items in date strings.
                                                              (line   6)
* removing empty directories:            rmdir invocation.    (line   6)
* removing files after shredding:        shred invocation.    (line 102)
* removing files or directories:         rm invocation.       (line   6)
* removing permissions:                  Setting Permissions. (line  42)
* restricted deletion flag:              Mode Structure.      (line  47)
* reverse sorting:                       Sorting the output.  (line  28)
* rm:                                    rm invocation.       (line   6)
* rmdir:                                 rmdir invocation.    (line   6)
* root as default owner:                 install invocation.  (line  60)
* Salz, Rich:                            Authors of getdate.  (line   6)
* seek:                                  dd invocation.       (line  58)
* self-backups:                          cp invocation.       (line  34)
* setgid:                                Mode Structure.      (line  41)
* setting permissions:                   Setting Permissions. (line  46)
* setuid:                                Mode Structure.      (line  38)
* setup for color:                       dircolors invocation.
                                                              (line   6)
* sh syntax for color setup:             dircolors invocation.
                                                              (line  27)
* SHELL environment variable, and color: dircolors invocation.
                                                              (line  16)
* shred:                                 shred invocation.    (line   6)
* SI output <1>:                         df invocation.       (line  45)
* SI output <2>:                         du invocation.       (line  48)
* SI output <3>:                         What information is listed.
                                                              (line  45)
* SI output:                             Block size.          (line  37)
* simple backup method:                  Backup options.      (line  44)
* SIMPLE_BACKUP_SUFFIX:                  Backup options.      (line  50)
* single-column output of files:         General output formatting.
                                                              (line  10)
* size of file to shred:                 shred invocation.    (line  96)
* size of files, reporting:              What information is listed.
                                                              (line 118)
* size of files, sorting files by:       Sorting the output.  (line  33)
* skip:                                  dd invocation.       (line  55)
* sorting ls output:                     Sorting the output.  (line   6)
* sparse files, copying:                 cp invocation.       (line 149)
* special file types:                    Special file types.  (line   9)
* special files:                         mknod invocation.    (line  11)
* status time, printing or sorting by:   Sorting the output.  (line  14)
* sticky:                                Mode Structure.      (line  47)
* stripping symbol table information:    install invocation.  (line  76)
* stripping trailing slashes <1>:        cp invocation.       (line 175)
* stripping trailing slashes:            mv invocation.       (line  70)
* subtracting permissions:               Setting Permissions. (line  42)
* superblock, writing:                   sync invocation.     (line   6)
* swab (byte-swapping):                  dd invocation.       (line  95)
* swap space, saving text image in:      Mode Structure.      (line  47)
* symbol table information, stripping:   install invocation.  (line  76)
* symbolic (soft) links, creating:       ln invocation.       (line   6)
* symbolic link, defined:                ln invocation.       (line  37)
* symbolic links, changing group:        chgrp invocation.    (line  32)
* symbolic links, changing owner <1>:    chown invocation.    (line  88)
* symbolic links, changing owner <2>:    chgrp invocation.    (line  27)
* symbolic links, changing owner:        chown invocation.    (line  83)
* symbolic links, copying:               cp invocation.       (line  69)
* symbolic links, copying with:          cp invocation.       (line 180)
* symbolic links, dereferencing:         Which files are listed.
                                                              (line  44)
* symbolic links, dereferencing in du:   du invocation.       (line  66)
* symbolic links, permissions of:        chmod invocation.    (line  10)
* symbolic modes:                        Symbolic Modes.      (line   6)
* sync:                                  sync invocation.     (line   6)
* sync (padding with nulls):             dd invocation.       (line 106)
* synchronize disk and memory:           sync invocation.     (line   6)
* target directory <1>:                  Target directory.    (line  10)
* target directory <2>:                  ln invocation.       (line  96)
* target directory <3>:                  cp invocation.       (line 192)
* target directory <4>:                  Target directory.    (line   6)
* target directory <5>:                  mv invocation.       (line  79)
* target directory:                      install invocation.  (line  84)
* terminal, using color iff:             General output formatting.
                                                              (line  25)
* text image, saving in swap space:      Mode Structure.      (line  47)
* this in date strings:                  Relative items in date strings.
                                                              (line  33)
* time:                                  touch invocation.    (line  56)
* time of day item:                      Time of day items.   (line   6)
* time zone correction:                  Time of day items.   (line  28)
* time zone item <1>:                    Time zone items.     (line   6)
* time zone item:                        General date syntax. (line  41)
* timestamps of installed files, preserving: install invocation.
                                                              (line  66)
* timestamps, changing file:             touch invocation.    (line   6)
* today in date strings:                 Relative items in date strings.
                                                              (line  33)
* tomorrow in date strings:              Relative items in date strings.
                                                              (line  29)
* touch:                                 touch invocation.    (line   6)
* trailing slashes:                      Trailing slashes.    (line   6)
* truncating output file, avoiding:      dd invocation.       (line 103)
* ucase, converting to:                  dd invocation.       (line  92)
* ufs filesystem type:                   df invocation.       (line 119)
* umask and modes:                       Umask and Protection.
                                                              (line   6)
* unblock:                               dd invocation.       (line  85)
* unlink:                                rm invocation.       (line  21)
* unsorted directory listing:            Sorting the output.  (line  21)
* use time, changing:                    touch invocation.    (line  48)
* use time, printing or sorting files by: Sorting the output. (line  14)
* utilities for file handling:           Top.                 (line   6)
* vdir:                                  vdir invocation.     (line   6)
* verbose ls format:                     What information is listed.
                                                              (line  64)
* version number, finding:               Common options.      (line  15)
* version, sorting option for ls:        Sorting the output.  (line  56)
* version-control Emacs variable:        Backup options.      (line  24)
* VERSION_CONTROL <1>:                   Backup options.      (line  13)
* VERSION_CONTROL <2>:                   cp invocation.       (line  53)
* VERSION_CONTROL <3>:                   mv invocation.       (line  46)
* VERSION_CONTROL <4>:                   ln invocation.       (line  52)
* VERSION_CONTROL:                       install invocation.  (line  28)
* vertical sorted files in columns:      General output formatting.
                                                              (line  15)
* week in date strings:                  Relative items in date strings.
                                                              (line  15)
* write permission:                      Mode Structure.      (line  11)
* write permission, symbolic:            Setting Permissions. (line  60)
* year in date strings:                  Relative items in date strings.
                                                              (line  15)
* yesterday in date strings:             Relative items in date strings.
                                                              (line  29)



Tag Table:
Node: Top2256
Node: Introduction2973
Node: Common options4292
Node: Backup options5090
Node: Block size7135
Node: Target directory10585
Node: Trailing slashes12824
Node: File permissions13819
Node: Mode Structure14407
Node: Symbolic Modes16592
Node: Setting Permissions17599
Node: Copying Permissions20148
Node: Changing Special Permissions20948
Node: Conditional Executability22582
Node: Multiple Changes23213
Node: Umask and Protection24875
Node: Numeric Modes25978
Node: Date input formats27785
Node: General date syntax30563
Node: Calendar date items32982
Node: Time of day items34985
Node: Time zone items36816
Node: Day of week items37672
Node: Relative items in date strings38667
Node: Pure numbers in date strings40635
Node: Authors of getdate41621
Node: Directory listing42375
Node: ls invocation42854
Node: Which files are listed44432
Node: What information is listed46074
Node: Sorting the output51212
Node: More details about version sort53530
Node: General output formatting54776
Node: Formatting the file names58795
Node: dir invocation60952
Node: vdir invocation61385
Node: dircolors invocation61785
Node: Basic operations63176
Node: cp invocation63794
Node: dd invocation71912
Node: install invocation75093
Node: mv invocation78616
Node: rm invocation81894
Node: shred invocation83974
Node: Special file types90491
Node: ln invocation91776
Node: mkdir invocation96038
Node: mkfifo invocation97531
Node: mknod invocation98433
Node: rmdir invocation99924
Node: Changing file attributes101082
Node: chown invocation101893
Node: chgrp invocation105928
Node: chmod invocation107859
Node: touch invocation109460
Node: Disk usage112477
Node: df invocation113091
Node: du invocation118200
Node: sync invocation121719
Node: Index122544

End Tag Table
